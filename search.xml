<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HGAME2024_week1</title>
    <url>/post/65f7df76.html</url>
    <content><![CDATA[<p>HGAME 2024网络攻防大赛—week1部分题目题解</p>
<span id="more"></span>

<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="2048-16"><a href="#2048-16" class="headerlink" title="2048*16"></a>2048*16</h3><p>题目hint说达到要求分数即可得到flag，猜测是改网页源码，让游戏直接win</p>
<p>查看网页源码，应该是被混淆了，但是题目给出了游戏的原版网页</p>
<p>看原版网页的源码，找到</p>
<img src="65f7df76/Snipaste_2024-02-03_15-35-30.png" class title="Snipaste_2024-02-03_15-35-30">

<p>里面判断出win &#x3D; !1就是游戏输赢的判断，改成1就可以，对照原版网页去改混淆过的网页</p>
<img src="65f7df76/Snipaste_2024-02-03_15-36-12.png" class title="Snipaste_2024-02-03_15-36-12">

<p>对应this[x(460)] &#x3D; !1这句</p>
<img src="65f7df76/Snipaste_2024-02-03_15-36-44.png" class title="Snipaste_2024-02-03_15-36-44">

<p>改源码后本地创建同样目录，进行替换</p>
<p>因为调试时断点非常多，所以调试时取消断点</p>
<p>启用调式，刷新页面，等待几秒后就出现flag</p>
<h3 id="ezHTTP"><a href="#ezHTTP" class="headerlink" title="ezHTTP"></a>ezHTTP</h3><p>启动时，提示访问从vidar.club查看</p>
<p>用hackbar添加一个Referer</p>
<img src="65f7df76/Snipaste_2024-02-03_16-28-11.png" class title="Snipaste_2024-02-03_16-28-11">

<p>添加后提示</p>
<img src="65f7df76/Snipaste_2024-02-03_16-28-57.png" class title="Snipaste_2024-02-03_16-28-57">

<p>这是一个明显的UA头</p>
<p>改UA后提示从本地访问，加了XFF后不行，从网上查找得知UA还有别的添加方式</p>
<p>添加X-Real-IP:127.0.0.1，后提示<code>Ok, the flag has been given to you ^-^</code>，但是没有找到flag，猜测藏在源码里</p>
<p>找到响应头里有个字符串，base64解码后出flag</p>
<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><h3 id="ezASM"><a href="#ezASM" class="headerlink" title="ezASM"></a>ezASM</h3><p>汇编代码</p>
<img src="65f7df76/Snipaste_2024-02-14_14-05-31.png" class title="Snipaste_2024-02-14_14-05-31">

<img src="65f7df76/Snipaste_2024-02-14_14-05-25.png" class title="Snipaste_2024-02-14_14-05-25">

<p>加密就是这个异或flag，密文也已经给出</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v = [<span class="number">74</span>, <span class="number">69</span>, <span class="number">67</span>, <span class="number">79</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">99</span>, <span class="number">113</span>, <span class="number">111</span>, <span class="number">125</span>, <span class="number">107</span>, <span class="number">81</span>, <span class="number">125</span>, <span class="number">107</span>, <span class="number">79</span>, <span class="number">82</span>, <span class="number">18</span>, <span class="number">80</span>, <span class="number">86</span>, <span class="number">22</span>, <span class="number">76</span>, <span class="number">86</span>, <span class="number">125</span>, <span class="number">22</span>, <span class="number">125</span>, <span class="number">112</span>, <span class="number">71</span>, <span class="number">84</span>, <span class="number">17</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">17</span>, <span class="number">95</span>, <span class="number">34</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(v[i] ^ <span class="number">0x22</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="ezPYC"><a href="#ezPYC" class="headerlink" title="ezPYC"></a>ezPYC</h3><p>解包后反编译</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Version: Python 3.11</span></span><br><span class="line"></span><br><span class="line">flag = [</span><br><span class="line">    <span class="number">87</span>,</span><br><span class="line">    <span class="number">75</span>,</span><br><span class="line">    <span class="number">71</span>,</span><br><span class="line">    <span class="number">69</span>,</span><br><span class="line">    <span class="number">83</span>,</span><br><span class="line">    <span class="number">121</span>,</span><br><span class="line">    <span class="number">83</span>,</span><br><span class="line">    <span class="number">125</span>,</span><br><span class="line">    <span class="number">117</span>,</span><br><span class="line">    <span class="number">106</span>,</span><br><span class="line">    <span class="number">108</span>,</span><br><span class="line">    <span class="number">106</span>,</span><br><span class="line">    <span class="number">94</span>,</span><br><span class="line">    <span class="number">80</span>,</span><br><span class="line">    <span class="number">48</span>,</span><br><span class="line">    <span class="number">114</span>,</span><br><span class="line">    <span class="number">100</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">55</span>,</span><br><span class="line">    <span class="number">94</span>,</span><br><span class="line">    <span class="number">51</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">91</span>,</span><br><span class="line">    <span class="number">48</span>,</span><br><span class="line">    <span class="number">108</span>,</span><br><span class="line">    <span class="number">119</span>,</span><br><span class="line">    <span class="number">97</span>,</span><br><span class="line">    <span class="number">115</span>,</span><br><span class="line">    <span class="number">49</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">48</span>,</span><br><span class="line">    <span class="number">108</span>,</span><br><span class="line">    <span class="number">100</span>,</span><br><span class="line">    <span class="number">37</span>,</span><br><span class="line">    <span class="number">124</span>,</span><br><span class="line">    <span class="number">2</span>]</span><br><span class="line">c = [</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    <span class="number">3</span>,</span><br><span class="line">    <span class="number">4</span>]</span><br><span class="line"><span class="built_in">input</span> = <span class="built_in">input</span>(<span class="string">&#x27;plz input flag:&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>不知道是不是反编译没成功，信息有点少，但是猜测加密就是key和flag逐个异或</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = [</span><br><span class="line">    <span class="number">87</span>,</span><br><span class="line">    <span class="number">75</span>,</span><br><span class="line">    <span class="number">71</span>,</span><br><span class="line">    <span class="number">69</span>,</span><br><span class="line">    <span class="number">83</span>,</span><br><span class="line">    <span class="number">121</span>,</span><br><span class="line">    <span class="number">83</span>,</span><br><span class="line">    <span class="number">125</span>,</span><br><span class="line">    <span class="number">117</span>,</span><br><span class="line">    <span class="number">106</span>,</span><br><span class="line">    <span class="number">108</span>,</span><br><span class="line">    <span class="number">106</span>,</span><br><span class="line">    <span class="number">94</span>,</span><br><span class="line">    <span class="number">80</span>,</span><br><span class="line">    <span class="number">48</span>,</span><br><span class="line">    <span class="number">114</span>,</span><br><span class="line">    <span class="number">100</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">55</span>,</span><br><span class="line">    <span class="number">94</span>,</span><br><span class="line">    <span class="number">51</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">91</span>,</span><br><span class="line">    <span class="number">48</span>,</span><br><span class="line">    <span class="number">108</span>,</span><br><span class="line">    <span class="number">119</span>,</span><br><span class="line">    <span class="number">97</span>,</span><br><span class="line">    <span class="number">115</span>,</span><br><span class="line">    <span class="number">49</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">48</span>,</span><br><span class="line">    <span class="number">108</span>,</span><br><span class="line">    <span class="number">100</span>,</span><br><span class="line">    <span class="number">37</span>,</span><br><span class="line">    <span class="number">124</span>,</span><br><span class="line">    <span class="number">2</span>]</span><br><span class="line">c = [</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    <span class="number">3</span>,</span><br><span class="line">    <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(flag[i]^c[i%<span class="number">4</span>]),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="ezUPX"><a href="#ezUPX" class="headerlink" title="ezUPX"></a>ezUPX</h3><p>upx壳</p>
<p>脱壳后用IDA打开</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// edx</span></span><br><span class="line">  __int64 i; <span class="comment">// rax</span></span><br><span class="line">  __int128 v6[<span class="number">2</span>]; <span class="comment">// [rsp+20h] [rbp-38h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+40h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(v6, <span class="number">0</span>, <span class="keyword">sizeof</span>(v6));</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  sub_140001020(<span class="string">&quot;plz input your flag:\n&quot;</span>);</span><br><span class="line">  sub_140001080(<span class="string">&quot;%36s&quot;</span>);</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>i64; (*((_BYTE *)v6 + i) ^ <span class="number">0x32</span>) == byte_1400022A0[i]; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)++v3 &gt;= <span class="number">37</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_140001020(<span class="string">&quot;Cooool!You really know a little of UPX!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_140001020(<span class="string">&quot;Sry,try again plz...&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>byte_1400022A0[i]是密文，加密也就只有一个异或0x32</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v = [<span class="number">0x64</span>, <span class="number">0x7B</span>, <span class="number">0x76</span>, <span class="number">0x73</span>, <span class="number">0x60</span>, <span class="number">0x49</span>, <span class="number">0x65</span>, <span class="number">0x5D</span>, <span class="number">0x45</span>, <span class="number">0x13</span>,</span><br><span class="line">  <span class="number">0x6B</span>, <span class="number">0x02</span>, <span class="number">0x47</span>, <span class="number">0x6D</span>, <span class="number">0x59</span>, <span class="number">0x5C</span>, <span class="number">0x02</span>, <span class="number">0x45</span>, <span class="number">0x6D</span>, <span class="number">0x06</span>,</span><br><span class="line">  <span class="number">0x6D</span>, <span class="number">0x5E</span>, <span class="number">0x03</span>, <span class="number">0x46</span>, <span class="number">0x46</span>, <span class="number">0x5E</span>, <span class="number">0x01</span>, <span class="number">0x6D</span>, <span class="number">0x02</span>, <span class="number">0x54</span>,</span><br><span class="line">  <span class="number">0x6D</span>, <span class="number">0x67</span>, <span class="number">0x62</span>, <span class="number">0x6A</span>, <span class="number">0x13</span>, <span class="number">0x4F</span>, <span class="number">0x32</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(v[i]^<span class="number">0x32</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="ezIDA"><a href="#ezIDA" class="headerlink" title="ezIDA"></a>ezIDA</h3><p>逆向签到题，IDA打开就有</p>
<h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="ezRSA"><a href="#ezRSA" class="headerlink" title="ezRSA"></a>ezRSA</h3><p>attachment.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q=getPrime(<span class="number">1024</span>)</span><br><span class="line">n=p*q</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line">leak1=<span class="built_in">pow</span>(p,q,n)</span><br><span class="line">leak2=<span class="built_in">pow</span>(q,p,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;leak1=<span class="subst">&#123;leak1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;leak2=<span class="subst">&#123;leak2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">leak1=149127170073611271968182576751290331559018441805725310426095412837589227670757540743929865853650399839102838431507200744724939659463200158012469676979987696419050900842798225665861812331113632892438742724202916416060266581590169063867688299288985734104127632232175657352697898383441323477450658179727728908669</span></span><br><span class="line"><span class="string">leak2=116122992714670915381309916967490436489020001172880644167179915467021794892927977272080596641785569119134259037522388335198043152206150259103485574558816424740204736215551933482583941959994625356581201054534529395781744338631021423703171146456663432955843598548122593308782245220792018716508538497402576709461</span></span><br><span class="line"><span class="string">c=10529481867532520034258056773864074017027019578041866245400647840230251661652999709715919620810933437191661180003295923273655675729588558899592524235622728816065501918076120812236580344991140980991532347991252705288633014913479970610056845543523591324177567061948922552275235486615514913932125436543991642607028689762693617305246716492783116813070355512606971626645594961850567586340389705821314842096465631886812281289843132258131809773797777049358789182212570606252509790830994263132020094153646296793522975632191912463919898988349282284972919932761952603379733234575351624039162440021940592552768579639977713099971</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">p = <span class="number">149127170073611271968182576751290331559018441805725310426095412837589227670757540743929865853650399839102838431507200744724939659463200158012469676979987696419050900842798225665861812331113632892438742724202916416060266581590169063867688299288985734104127632232175657352697898383441323477450658179727728908669</span></span><br><span class="line">q = <span class="number">116122992714670915381309916967490436489020001172880644167179915467021794892927977272080596641785569119134259037522388335198043152206150259103485574558816424740204736215551933482583941959994625356581201054534529395781744338631021423703171146456663432955843598548122593308782245220792018716508538497402576709461</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="number">10529481867532520034258056773864074017027019578041866245400647840230251661652999709715919620810933437191661180003295923273655675729588558899592524235622728816065501918076120812236580344991140980991532347991252705288633014913479970610056845543523591324177567061948922552275235486615514913932125436543991642607028689762693617305246716492783116813070355512606971626645594961850567586340389705821314842096465631886812281289843132258131809773797777049358789182212570606252509790830994263132020094153646296793522975632191912463919898988349282284972919932761952603379733234575351624039162440021940592552768579639977713099971</span></span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gp.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure>



<h3 id="ezMath"><a href="#ezMath" class="headerlink" title="ezMath"></a>ezMath</h3><p>attachment.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> random,string</span><br><span class="line">x = <span class="number">3058389164815894335086675882217709431950420307140756009821362546111334285928768064662409120517323199</span></span><br><span class="line">y = <span class="number">9037815138660369922198555785216162916412331641365948545459353586895717702576049626533527779108680</span></span><br><span class="line">enc=<span class="string">b&quot;\xce\xf1\x94\x84\xe9m\x88\x04\xcb\x9ad\x9e\x08b\xbf\x8b\xd3\r\xe2\x81\x17g\x9c\xd7\x10\x19\x1a\xa6\xc3\x9d\xde\xe7\xe0h\xed/\x00\x95tz)1\\\t8:\xb1,U\xfe\xdec\xf2h\xab`\xe5&#x27;\x93\xf8\xde\xb2\x9a\x9a&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x+<span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(x)%<span class="number">16</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">KEY</span>):</span><br><span class="line">    cipher= AES.new(KEY,AES.MODE_ECB)</span><br><span class="line">    encrypted =cipher.decrypt(enc)</span><br><span class="line">    <span class="keyword">return</span> encrypted</span><br><span class="line">D = <span class="number">114514</span></span><br><span class="line"><span class="keyword">assert</span> x**<span class="number">2</span> - D * y**<span class="number">2</span> == <span class="number">1</span></span><br><span class="line">key=pad(long_to_bytes(y))[:<span class="number">16</span>]</span><br><span class="line">flag=encrypt(key)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#enc=b&quot;\xce\xf1\x94\x84\xe9m\x88\x04\xcb\x9ad\x9e\x08b\xbf\x8b\xd3\r\xe2\x81\x17g\x9c\xd7\x10\x19\x1a\xa6\xc3\x9d\xde\xe7\xe0h\xed/\x00\x95tz)1\\\t8:\xb1,U\xfe\xdec\xf2h\xab`\xe5&#x27;\x93\xf8\xde\xb2\x9a\x9a&quot;</span></span><br></pre></td></tr></table></figure>

<p>解佩尔方程得到y</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil,floor,sqrt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pell_minimum_solution</span>(<span class="params">n</span>):</span><br><span class="line">    a = []</span><br><span class="line">    m = floor(sqrt(n))</span><br><span class="line">    sq = sqrt(n)</span><br><span class="line">    a.append(m)</span><br><span class="line">    b = m</span><br><span class="line">    c = <span class="number">1</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a[i-<span class="number">1</span>] != <span class="number">2</span> * a[<span class="number">0</span>]:</span><br><span class="line">        c = (n - b * b) / c</span><br><span class="line">        tmp = (sq + b) / c</span><br><span class="line">        a.append(floor(tmp))</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        b = a[i-<span class="number">1</span>] * c - b</span><br><span class="line">    p = <span class="number">1</span></span><br><span class="line">    q = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        t = p</span><br><span class="line">        p = q + p * a[j]</span><br><span class="line">        q = t</span><br><span class="line">    <span class="keyword">if</span> (i-<span class="number">1</span>) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        x0 = p</span><br><span class="line">        y0 = q</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x0 = <span class="number">2</span> * p ** <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        y0 = <span class="number">2</span> * p * q</span><br><span class="line">    <span class="keyword">return</span> x0,y0</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pell_minimum_solution(<span class="number">114514</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> random,string</span><br><span class="line">x = <span class="number">3058389164815894335086675882217709431950420307140756009821362546111334285928768064662409120517323199</span></span><br><span class="line">y = <span class="number">9037815138660369922198555785216162916412331641365948545459353586895717702576049626533527779108680</span></span><br><span class="line">enc=<span class="string">b&quot;\xce\xf1\x94\x84\xe9m\x88\x04\xcb\x9ad\x9e\x08b\xbf\x8b\xd3\r\xe2\x81\x17g\x9c\xd7\x10\x19\x1a\xa6\xc3\x9d\xde\xe7\xe0h\xed/\x00\x95tz)1\\\t8:\xb1,U\xfe\xdec\xf2h\xab`\xe5&#x27;\x93\xf8\xde\xb2\x9a\x9a&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x+<span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(x)%<span class="number">16</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">KEY</span>):</span><br><span class="line">    cipher= AES.new(KEY,AES.MODE_ECB)</span><br><span class="line">    encrypted =cipher.decrypt(enc)</span><br><span class="line">    <span class="keyword">return</span> encrypted</span><br><span class="line">D = <span class="number">114514</span></span><br><span class="line"><span class="keyword">assert</span> x**<span class="number">2</span> - D * y**<span class="number">2</span> == <span class="number">1</span></span><br><span class="line">key=pad(long_to_bytes(y))[:<span class="number">16</span>]</span><br><span class="line">flag=encrypt(key)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>



<h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><h3 id="SignIn"><a href="#SignIn" class="headerlink" title="SignIn"></a>SignIn</h3><img src="65f7df76/try_another_way_to_see.png" class title="try_another_way_to_see">

<p>查看图片是一堆字符叠在一起，将图片拉伸一下得到flag</p>
<h3 id="simple-attack"><a href="#simple-attack" class="headerlink" title="simple_attack"></a>simple_attack</h3><p>zip被加密了</p>
<img src="65f7df76/Snipaste_2024-02-14_11-23-35.png" class title="Snipaste_2024-02-14_11-23-35">

<p>查看zip里面刚好有这张图片</p>
<img src="65f7df76/Snipaste_2024-02-14_11-23-59.png" class title="Snipaste_2024-02-14_11-23-59">

<p>明文攻击，将jpg压缩后用appr进行明文攻击，得到解密后的压缩包内容</p>
<img src="65f7df76/Snipaste_2024-02-14_13-16-39.png" class title="Snipaste_2024-02-14_13-16-39">

<p>图像base64解码</p>
<img src="65f7df76/Snipaste_2024-02-14_13-17-41.png" class title="Snipaste_2024-02-14_13-17-41">



<h3 id="希儿希儿希尔"><a href="#希儿希儿希尔" class="headerlink" title="希儿希儿希尔"></a>希儿希儿希尔</h3><p>附件得到一个png图片，打不开，进行crc32校验</p>
<img src="65f7df76/Snipaste_2024-02-14_13-24-20.png" class title="Snipaste_2024-02-14_13-24-20">

<img src="65f7df76/Snipaste_2024-02-14_13-24-30.png" class title="Snipaste_2024-02-14_13-24-30">

<p>crc爆破宽高</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">crcbp = <span class="built_in">open</span>(<span class="string">&quot;secret.png&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()  <span class="comment"># 打开图片</span></span><br><span class="line">crc32frombp = <span class="built_in">int</span>(crcbp[<span class="number">29</span>:<span class="number">33</span>].<span class="built_in">hex</span>(), <span class="number">16</span>)  <span class="comment"># 读取图片中的CRC校验值</span></span><br><span class="line"><span class="built_in">print</span>(crc32frombp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4000</span>):  <span class="comment"># 宽度1-4000进行枚举</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4000</span>):  <span class="comment"># 高度1-4000进行枚举</span></span><br><span class="line">        data = crcbp[<span class="number">12</span>:<span class="number">16</span>] + \</span><br><span class="line">               struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, i) + struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, j) + crcbp[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">        crc32 = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span> (crc32 == crc32frombp):  <span class="comment"># 计算当图片大小为i:j时的CRC校验值，与图片中的CRC比较，当相同，则图片大小已经确定</span></span><br><span class="line">            <span class="built_in">print</span>(i, j)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;hex:&#x27;</span>, <span class="built_in">hex</span>(i), <span class="built_in">hex</span>(j))</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#303792205</span></span><br><span class="line"><span class="comment">#1394 1999</span></span><br><span class="line"><span class="comment">#hex: 0x572 0x7cf</span></span><br></pre></td></tr></table></figure>

<p>修改宽高后，使用binwalk看看能不能提取出什么内容</p>
<img src="65f7df76/Snipaste_2024-02-14_13-29-33.png" class title="Snipaste_2024-02-14_13-29-33">

<p>提取出txt，应该就是密文，根据题目hint，应该是希尔密码，那么还需要key</p>
<p>用Stegsolve看看有没有什么信息</p>
<img src="65f7df76/Snipaste_2024-02-14_13-32-17.png" class title="Snipaste_2024-02-14_13-32-17">

<p>lsb隐写拿到key，最后希尔密码解密密文得到flag</p>
<h3 id="来自星辰的问候"><a href="#来自星辰的问候" class="headerlink" title="来自星辰的问候"></a>来自星辰的问候</h3><p>jpg文件，使用stegdetect查看是什么加密</p>
<img src="65f7df76/Snipaste_2024-02-14_13-55-17.png" class title="Snipaste_2024-02-14_13-55-17">

<p>stegdetect查出来是jphide，使用jphs解密发现需要口令</p>
<p>用steghide爆破出口令</p>
<p>steghide本身不提供爆破功能，需要用额外的脚本来完成这个功能</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bruteStegHide.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> `<span class="built_in">cat</span> <span class="variable">$2</span>`;<span class="keyword">do</span></span><br><span class="line">    steghide extract -sf <span class="variable">$1</span> -p <span class="variable">$line</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">    <span class="keyword">if</span> [[ $? -eq 0 ]];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&#x27;password is: &#x27;</span><span class="variable">$line</span></span><br><span class="line">        <span class="built_in">exit</span></span><br><span class="line">    <span class="keyword">fi</span>  </span><br><span class="line"><span class="keyword">done</span> </span><br></pre></td></tr></table></figure>

<p>爆破得到来自星辰文字图片</p>
<img src="65f7df76/Snipaste_2024-02-14_13-58-54.png" class title="Snipaste_2024-02-14_13-58-54">

<p>有点难懂，但是根据hint，需要去官网找对照表</p>
<img src="65f7df76/Snipaste_2024-02-14_14-00-35.png" class title="Snipaste_2024-02-14_14-00-35">

<p>到官网f12，找到对照文件，译出密码</p>
]]></content>
      <categories>
        <category>WP</category>
      </categories>
      <tags>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>HGAME—2024—week3</title>
    <url>/post/2d20fe09.html</url>
    <content><![CDATA[<p>HGAME 2024网络攻防大赛—week3部分题目题解</p>
<span id="more"></span>

<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><h3 id="encrypt"><a href="#encrypt" class="headerlink" title="encrypt"></a>encrypt</h3><p>IDA打开，一堆Windows api</p>
<img src="2d20fe09/Snipaste_2024-02-21_15-57-11.png" class title="Snipaste_2024-02-21_15-57-11">

<p>首先先解释一下各个api的作用：</p>
<p><strong>BCryptOpenAlgorithmProvider</strong>: 打开一个密码算法提供者。</p>
<p><strong>BCryptGetProperty</strong>: 获取密码算法提供者的属性。在这里，它获取了<code>ObjectLength</code>和<code>BlockLength</code>两个属性。<code>ObjectLength</code>属性用于分配内存，<code>BlockLength</code>属性用于设置密码算法的块长度。</p>
<p><strong>BCryptSetProperty</strong>: 设置密码算法提供者的属性。在这里，它设置了对称加密的链接模式（Chaining Mode）</p>
<p><strong>BCryptGenerateSymmetricKey</strong>: 生成对称密钥。</p>
<p><strong>BCryptExportKey</strong>: 导出密钥。</p>
<p><strong>BCryptEncrypt</strong>: 加密数据。</p>
<p><strong>BCryptDestroyKey</strong>: 销毁密钥对象。</p>
<p><strong>BCryptCloseAlgorithmProvider</strong>: 关闭算法提供者。</p>
<p><strong>GetProcessHeap</strong>: 获取当前进程的堆句柄。</p>
<p><strong>HeapAlloc</strong>: 在堆中分配内存。</p>
<p><strong>HeapFree</strong>: 释放堆中的内存。</p>
<p>通过对这些api的解释，我们可以知道这个程序就是通过使用Windows api来生成一个加密体系来对flag进行加密</p>
<p>看到最后：</p>
<img src="2d20fe09/Snipaste_2024-02-21_16-05-26.png" class title="Snipaste_2024-02-21_16-05-26">

<p>那么这个<code>unk_7FF796305050</code>应该就是密文了</p>
<p>现在还需要知道加密模式，动调起来应该可以知道</p>
<p>动调后进入到算法提供的<code>pszAlgId</code></p>
<img src="2d20fe09/Snipaste_2024-02-21_16-09-54.png" class title="Snipaste_2024-02-21_16-09-54">

<img src="2d20fe09/Snipaste_2024-02-21_16-10-03.png" class title="Snipaste_2024-02-21_16-10-03">

<img src="2d20fe09/Snipaste_2024-02-21_16-10-08.png" class title="Snipaste_2024-02-21_16-10-08">

<p>可以知道该加密算法是aes，模式是cbc</p>
<p>那么现在还需要找到key和iv</p>
<p><code>BCryptGenerateSymmetricKey</code>是生成key</p>
<img src="2d20fe09/Snipaste_2024-02-21_16-23-39.png" class title="Snipaste_2024-02-21_16-23-39">

<p>那么key就在<code>pbSecret</code>里</p>
<img src="2d20fe09/Snipaste_2024-02-21_16-25-54.png" class title="Snipaste_2024-02-21_16-25-54">

<p>iv则猜测在memcpy对<code>&amp;unk_7FF78E6634A0</code>的比较中</p>
<p>最后使用cyberchef解aes</p>
<img src="2d20fe09/Snipaste_2024-02-21_16-28-19.png" class title="Snipaste_2024-02-21_16-28-19">



<h3 id="mystery"><a href="#mystery" class="headerlink" title="mystery"></a>mystery</h3><p>IDA打开，通过strings定位到关键函数</p>
<img src="2d20fe09/Snipaste_2024-02-21_16-29-58.png" class title="Snipaste_2024-02-21_16-29-58">

<img src="2d20fe09/Snipaste_2024-02-21_16-30-07.png" class title="Snipaste_2024-02-21_16-30-07">

<p>首先第一个函数就是生成一个keybox</p>
<img src="2d20fe09/Snipaste_2024-02-21_16-30-41.png" class title="Snipaste_2024-02-21_16-30-41">

<p>第二步则是使用生成的keybox对我们的输入进行加密</p>
<img src="2d20fe09/Snipaste_2024-02-21_16-31-40.png" class title="Snipaste_2024-02-21_16-31-40">

<p>两个函数合起来就是一个清晰的rc4，加密和解密都是同样的脚本，只不过最后被改为<code>*a2++ -= result;</code></p>
<p>但是<code>result</code>可以通过动调获取，于是可以编写一个idapython的脚本，输出result</p>
<img src="2d20fe09/Snipaste_2024-02-21_16-34-41.png" class title="Snipaste_2024-02-21_16-34-41">

<p>首先在result转到指令下断点</p>
<p>然后选edit breakpoint</p>
<img src="2d20fe09/Snipaste_2024-02-21_16-35-53.png" class title="Snipaste_2024-02-21_16-35-53">

<img src="2d20fe09/Snipaste_2024-02-21_16-37-33.png" class title="Snipaste_2024-02-21_16-37-33">

<p>写下如下脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"><span class="built_in">print</span>(idaapi.get_reg_val(<span class="string">&#x27;al&#x27;</span>),end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>最后动调，随便给一个输入，就自动输出result了</p>
<img src="2d20fe09/Snipaste_2024-02-21_16-42-58.png" class title="Snipaste_2024-02-21_16-42-58">

<p>然后就是解密，s2是密文，key也给出</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v = [<span class="number">24</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">32</span>, <span class="number">25</span>, <span class="number">39</span>, <span class="number">185</span>, <span class="number">201</span>, <span class="number">52</span>, <span class="number">199</span>, <span class="number">113</span>, <span class="number">201</span>, <span class="number">172</span>, <span class="number">23</span>, <span class="number">180</span>, <span class="number">30</span>, <span class="number">229</span>, <span class="number">233</span>, <span class="number">252</span>, <span class="number">42</span>, <span class="number">74</span>, <span class="number">1</span>, <span class="number">234</span>, <span class="number">121</span>, <span class="number">199</span>,</span><br><span class="line">     <span class="number">130</span>, <span class="number">254</span>, <span class="number">81</span>, <span class="number">231</span>, <span class="number">177</span>, <span class="number">174</span>, <span class="number">40</span>, <span class="number">21</span>, <span class="number">172</span>, <span class="number">45</span>, <span class="number">155</span>, <span class="number">21</span>, <span class="number">111</span>, <span class="number">57</span>, <span class="number">15</span>, <span class="number">200</span>, <span class="number">235</span>, <span class="number">72</span>, <span class="number">160</span>, <span class="number">41</span>, <span class="number">248</span>, <span class="number">25</span>, <span class="number">63</span>, <span class="number">1</span>, <span class="number">231</span>,</span><br><span class="line">     <span class="number">139</span>, <span class="number">31</span>, <span class="number">143</span>, <span class="number">15</span>, <span class="number">189</span>, <span class="number">246</span>]</span><br><span class="line">s = [<span class="number">0x50</span>, <span class="number">0x42</span>, <span class="number">0x38</span>, <span class="number">0x4D</span>, <span class="number">0x4C</span>, <span class="number">0x54</span>, <span class="number">0x90</span>, <span class="number">0x6F</span>, <span class="number">0xFE</span>, <span class="number">0x6F</span>,</span><br><span class="line">     <span class="number">0xBC</span>, <span class="number">0x69</span>, <span class="number">0xB9</span>, <span class="number">0x22</span>, <span class="number">0x7C</span>, <span class="number">0x16</span>, <span class="number">0x8F</span>, <span class="number">0x44</span>, <span class="number">0x38</span>, <span class="number">0x4A</span>,</span><br><span class="line">     <span class="number">0xEF</span>, <span class="number">0x37</span>, <span class="number">0x43</span>, <span class="number">0xC0</span>, <span class="number">0xA2</span>, <span class="number">0xB6</span>, <span class="number">0x34</span>, <span class="number">0x2C</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>((s[i] + v[i])%<span class="number">256</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="findme"><a href="#findme" class="headerlink" title="findme"></a>findme</h3><p>IDA打开，进入到main函数</p>
<img src="2d20fe09/Snipaste_2024-02-21_16-48-15.png" class title="Snipaste_2024-02-21_16-48-15">

<p>下面的base64解码也是一个假的flag</p>
<p>往下看 看到buffer</p>
<img src="2d20fe09/Snipaste_2024-02-21_16-49-19.png" class title="Snipaste_2024-02-21_16-49-19">

<p><code>mz......</code>像是一个exe文件头，根据题目描述，一堆奇怪的数据</p>
<p>那么有可能这段数据就是题目的真正的exe，现在把这段数据dump出来</p>
<p>编写脚本</p>
<img src="2d20fe09/Snipaste_2024-02-21_16-51-20.png" class title="Snipaste_2024-02-21_16-51-20">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> i,fp;</span><br><span class="line">    fp = fopen(<span class="string">&quot;d:\\dump.exe&quot;</span>,<span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    <span class="keyword">auto</span> start = <span class="number">0x140004040</span>;</span><br><span class="line">    <span class="keyword">auto</span> end = <span class="number">0x14000D8DF</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=start;i&lt;end;i=i+<span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        fputc(Byte(i),fp);</span><br><span class="line">    &#125;</span><br><span class="line">    fp.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>dump出来后打开得到的exe</p>
<img src="2d20fe09/Snipaste_2024-02-21_16-54-36.png" class title="Snipaste_2024-02-21_16-54-36">

<p>果然这才是真正的exe</p>
<p>发现有许多jz jnz构成的花指令，手动patch掉后对main函数重新定义，则可以f5查看伪代码</p>
<img src="2d20fe09/Snipaste_2024-02-21_16-56-57.png" class title="Snipaste_2024-02-21_16-56-57">

<p>查看<code>sub_641068</code>函数和<code>sub_64110C</code>函数</p>
<img src="2d20fe09/Snipaste_2024-02-21_16-57-43.png" class title="Snipaste_2024-02-21_16-57-43">

<img src="2d20fe09/Snipaste_2024-02-21_16-57-48.png" class title="Snipaste_2024-02-21_16-57-48">

<p>又是一个rc4，类似上面<code>mystery</code>题</p>
<p>那么用idapython脚本导出result</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"><span class="built_in">print</span>(idaapi.get_reg_val(<span class="string">&#x27;al&#x27;</span>),end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>最后用<code>密文—result</code>得到flag</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v = [<span class="number">0x7D</span>, <span class="number">0x2B</span>, <span class="number">0x43</span>, <span class="number">0xA9</span>, <span class="number">0xB9</span>, <span class="number">0x6B</span>, <span class="number">0x93</span>, <span class="number">0x2D</span>, <span class="number">0x9A</span>, <span class="number">0xD0</span>,</span><br><span class="line">  <span class="number">0x48</span>, <span class="number">0xC8</span>, <span class="number">0xEB</span>, <span class="number">0x51</span>, <span class="number">0x59</span>, <span class="number">0xE9</span>, <span class="number">0x74</span>, <span class="number">0x68</span>, <span class="number">0x8A</span>, <span class="number">0x45</span>,</span><br><span class="line">  <span class="number">0x6B</span>, <span class="number">0xBA</span>, <span class="number">0xA7</span>, <span class="number">0x16</span>, <span class="number">0xF1</span>, <span class="number">0x10</span>, <span class="number">0x74</span>, <span class="number">0xD5</span>, <span class="number">0x41</span>, <span class="number">0x3C</span>,</span><br><span class="line">  <span class="number">0x67</span>, <span class="number">0x7D</span>]</span><br><span class="line">s = [<span class="number">21</span>,<span class="number">196</span>,<span class="number">226</span>,<span class="number">60</span>,<span class="number">84</span>,<span class="number">240</span>,<span class="number">77</span>,<span class="number">193</span>,<span class="number">106</span>,<span class="number">89</span>,<span class="number">21</span>,<span class="number">86</span>,<span class="number">120</span>,<span class="number">242</span>,<span class="number">24</span>,<span class="number">119</span>,<span class="number">65</span>,<span class="number">9</span>,<span class="number">52</span>,<span class="number">224</span>,<span class="number">249</span>,<span class="number">65</span>,<span class="number">72</span>,<span class="number">176</span>,<span class="number">127</span>,<span class="number">220</span>,<span class="number">13</span>,<span class="number">99</span>,<span class="number">224</span>,<span class="number">206</span>,<span class="number">243</span>,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v)):</span><br><span class="line">    c = v[i]-s[i]</span><br><span class="line">    <span class="keyword">if</span> c&lt;<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(c+<span class="number">256</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(c),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="exRSA"><a href="#exRSA" class="headerlink" title="exRSA"></a>exRSA</h3><p>attachment.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">p=getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">q=getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e1=inverse(getPrime(<span class="number">768</span>),phi)</span><br><span class="line">e2=inverse(getPrime(<span class="number">768</span>),phi)</span><br><span class="line">e3=inverse(getPrime(<span class="number">768</span>),phi)</span><br><span class="line">n=p*q</span><br><span class="line">c=<span class="built_in">pow</span>(m,<span class="number">0x10001</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e1=<span class="subst">&#123;e1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e2=<span class="subst">&#123;e2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e3=<span class="subst">&#123;e3&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n=<span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">e1=5077048237811969427473111225370876122528967447056551899123613461792688002896788394304192917610564149766252232281576990293485239684145310876930997918960070816968829150376875953405420809586267153171717496198336861089523701832098322284501931142889817575816761705044951705530849327928849848158643030693363143757063220584714925893965587967042137557807261154117916358519477964645293471975063362050690306353627492980861008439765365837622657977958069853288056307253167509883258122949882277021665317807253308906355670472172346171177267688064959397186926103987259551586627965406979118193485527520976748490728460167949055289539</span></span><br><span class="line"><span class="string">e2=12526848298349005390520276923929132463459152574998625757208259297891115133654117648215782945332529081365273860316201130793306570777735076534772168999705895641207535303839455074003057687810381110978320988976011326106919940799160974228311824760046370273505511065619268557697182586259234379239410482784449815732335294395676302226416863709340032987612715151916084291821095462625821023133560415325824885347221391496937213246361736361270846741128557595603052713612528453709948403100711277679641218520429878897565655482086410576379971404789212297697553748292438183065500993375040031733825496692797699362421010271599510269401</span></span><br><span class="line"><span class="string">e3=12985940757578530810519370332063658344046688856605967474941014436872720360444040464644790980976991393970947023398357422203873284294843401144065013911463670501559888601145108651961098348250824166697665528417668374408814572959722789020110396245076275553505878565603509466220710219260037783849276475397283421068716088638186994778153542817681963059581651103563578804145156157584336712678882995685632615686853980176047683326974283896343322981521150211317597571554542488921290158122634140571148036732893808064119048328855134054709120877895941670166421664806186710346824494054783025733475898081247824887967550418509038276279</span></span><br><span class="line"><span class="string">c=1414176060152301842110497098024597189246259172019335414900127452098233943041825926028517437075316294943355323947458928010556912909139739282924255506647305696872907898950473108556417350199783145349691087255926287363286922011841143339530863300198239231490707393383076174791818994158815857391930802936280447588808440607415377391336604533440099793849237857247557582307391329320515996021820000355560514217505643587026994918588311127143566858036653315985177551963836429728515745646807123637193259859856630452155138986610272067480257330592146135108190083578873094133114440050860844192259441093236787002715737932342847147399</span></span><br><span class="line"><span class="string">n=17853303733838066173110417890593704464146824886316456780873352559969742615755294466664439529352718434399552818635352768033531948009737170697566286848710832800426311328560924133698481653594007727877031506265706341560810588064209681809146597572126173303463125668183837840427667101827234752823747483792944536893070188010357644478512143332014786539698535220139784440314481371464053954769822738407808161946943216714729685820896972467020893493349051243983390018762076812868678098172416465691550285372846402991995794349015838868221686216396597327273110165922789814315858462049706255254066724012925815100434953821856854529753</span></span><br><span class="line"><span class="string">phi=17853303733838066173110417890593704464146824886316456780873352559969742615755294466664439529352718434399552818635352768033531948009737170697566286848710832800426311328560924133698481653594007727877031506265706341560810588064209681809146597572126173303463125668183837840427667101827234752823747483792944536892802927070181771490686318736012878592343518366616230003156532617279650769801240788457082470798285098309787313234015003029546069389983917646339464213270307973083920197245464323265774603130048384907423910358440436321967414553635119220303427088297964135321132951478390454424777782514867778927855950169251946270628</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>考点是rsa多组低解密指数攻击，直接上脚本</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = <span class="number">17853303733838066173110417890593704464146824886316456780873352559969742615755294466664439529352718434399552818635352768033531948009737170697566286848710832800426311328560924133698481653594007727877031506265706341560810588064209681809146597572126173303463125668183837840427667101827234752823747483792944536893070188010357644478512143332014786539698535220139784440314481371464053954769822738407808161946943216714729685820896972467020893493349051243983390018762076812868678098172416465691550285372846402991995794349015838868221686216396597327273110165922789814315858462049706255254066724012925815100434953821856854529753</span></span><br><span class="line">e1 = <span class="number">5077048237811969427473111225370876122528967447056551899123613461792688002896788394304192917610564149766252232281576990293485239684145310876930997918960070816968829150376875953405420809586267153171717496198336861089523701832098322284501931142889817575816761705044951705530849327928849848158643030693363143757063220584714925893965587967042137557807261154117916358519477964645293471975063362050690306353627492980861008439765365837622657977958069853288056307253167509883258122949882277021665317807253308906355670472172346171177267688064959397186926103987259551586627965406979118193485527520976748490728460167949055289539</span></span><br><span class="line">e2 = <span class="number">12526848298349005390520276923929132463459152574998625757208259297891115133654117648215782945332529081365273860316201130793306570777735076534772168999705895641207535303839455074003057687810381110978320988976011326106919940799160974228311824760046370273505511065619268557697182586259234379239410482784449815732335294395676302226416863709340032987612715151916084291821095462625821023133560415325824885347221391496937213246361736361270846741128557595603052713612528453709948403100711277679641218520429878897565655482086410576379971404789212297697553748292438183065500993375040031733825496692797699362421010271599510269401</span></span><br><span class="line">e3 = <span class="number">12985940757578530810519370332063658344046688856605967474941014436872720360444040464644790980976991393970947023398357422203873284294843401144065013911463670501559888601145108651961098348250824166697665528417668374408814572959722789020110396245076275553505878565603509466220710219260037783849276475397283421068716088638186994778153542817681963059581651103563578804145156157584336712678882995685632615686853980176047683326974283896343322981521150211317597571554542488921290158122634140571148036732893808064119048328855134054709120877895941670166421664806186710346824494054783025733475898081247824887967550418509038276279</span></span><br><span class="line">c = <span class="number">1414176060152301842110497098024597189246259172019335414900127452098233943041825926028517437075316294943355323947458928010556912909139739282924255506647305696872907898950473108556417350199783145349691087255926287363286922011841143339530863300198239231490707393383076174791818994158815857391930802936280447588808440607415377391336604533440099793849237857247557582307391329320515996021820000355560514217505643587026994918588311127143566858036653315985177551963836429728515745646807123637193259859856630452155138986610272067480257330592146135108190083578873094133114440050860844192259441093236787002715737932342847147399</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alpha2 = <span class="number">815.</span>/<span class="number">2048</span></span><br><span class="line">M1 = <span class="built_in">int</span>(gmpy2.mpz(N)**(<span class="number">3.</span>/<span class="number">2</span>))</span><br><span class="line">M2 = <span class="built_in">int</span>( gmpy2.mpz(N) )</span><br><span class="line">M3 = <span class="built_in">int</span>(gmpy2.mpz(N)**(<span class="number">3.</span>/<span class="number">2</span> + alpha2))</span><br><span class="line">M4 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">0.5</span>) )</span><br><span class="line">M5 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">3.</span>/<span class="number">2</span> + alpha2) )</span><br><span class="line">M6 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">1.</span>+alpha2) )</span><br><span class="line">M7 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">1.</span>+alpha2) )</span><br><span class="line">D = diagonal_matrix(ZZ, [M1, M2, M3, M4, M5, M6, M7, <span class="number">1</span>])</span><br><span class="line">B = Matrix(ZZ, [ [<span class="number">1</span>, -N,   <span class="number">0</span>,  N**<span class="number">2</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,    -N**<span class="number">3</span>],</span><br><span class="line">                 [<span class="number">0</span>, e1, -e1, -e1*N, -e1,      <span class="number">0</span>,   e1*N,  e1*N**<span class="number">2</span>],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,  e2, -e2*N,   <span class="number">0</span>,   e2*N,      <span class="number">0</span>,  e2*N**<span class="number">2</span>],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>, e1*e2,   <span class="number">0</span>, -e1*e2, -e1*e2, -e1*e2*N],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,  e3,  -e3*N,  -e3*N,  e3*N**<span class="number">2</span>],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,  e1*e3,      <span class="number">0</span>, -e1*e3*N],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,  e2*e3, -e2*e3*N],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>, e1*e2*e3] ]) * D</span><br><span class="line"></span><br><span class="line">L = B.LLL()</span><br><span class="line"></span><br><span class="line">v = Matrix(ZZ, L[<span class="number">0</span>])</span><br><span class="line">x = v * B**(-<span class="number">1</span>)</span><br><span class="line">phi_ = (e1*x[<span class="number">0</span>,<span class="number">1</span>]/x[<span class="number">0</span>,<span class="number">0</span>]).floor()</span><br><span class="line">d = inverse_mod( <span class="number">65537</span>, phi_)</span><br><span class="line">m = <span class="built_in">hex</span>(power_mod(c, d, N))[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(m))</span><br></pre></td></tr></table></figure>



<h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="与ai聊天"><a href="#与ai聊天" class="headerlink" title="与ai聊天"></a>与ai聊天</h3><p>misc签到题</p>
<p>进网页让ai输出flag</p>
<img src="2d20fe09/Snipaste_2024-02-21_17-12-50.png" class title="Snipaste_2024-02-21_17-12-50">]]></content>
      <categories>
        <category>WP</category>
      </categories>
      <tags>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>HGAME—2024—week2</title>
    <url>/post/5a27ce9f.html</url>
    <content><![CDATA[<p>HGAME 2024网络攻防大赛—week2部分题目题解</p>
<span id="more"></span>

<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><h3 id="ezcpp"><a href="#ezcpp" class="headerlink" title="ezcpp"></a>ezcpp</h3><p>IDA打开</p>
<img src="5a27ce9f/Snipaste_2024-02-09_23-30-02.png" class title="Snipaste_2024-02-09_23-30-02">

<p>是一个展开的tea</p>
<p>并且就前几个字节在加密，直接上tea经典解密脚本</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0xdeadbeef</span>;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>] , v1 = v[<span class="number">1</span>] , sum = delta * <span class="number">32</span>, i;</span><br><span class="line">    <span class="type">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        v1 -= (v0 + sum) ^ (k2 + (v0 &lt;&lt; <span class="number">4</span>)) ^ (k3 + (v0 &lt;&lt; <span class="number">5</span>));</span><br><span class="line">        v0 -= (v1 + sum) ^ (k0 + (v1 &lt;&lt; <span class="number">4</span>)) ^ (k1 + (v1 &lt;&lt; <span class="number">5</span>));</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> j;</span><br><span class="line">    <span class="type">int8_t</span> v[<span class="number">33</span>] = &#123; <span class="number">136</span>, <span class="number">106</span>, <span class="number">176</span>, <span class="number">201</span>, <span class="number">173</span>, <span class="number">241</span>, <span class="number">51</span>, <span class="number">51</span>, <span class="number">148</span>, <span class="number">116</span>, <span class="number">181</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">95</span>, <span class="number">48</span>, <span class="number">98</span>, <span class="number">74</span>, <span class="number">51</span>, <span class="number">99</span>, <span class="number">84</span>, <span class="number">95</span>, <span class="number">48</span>, <span class="number">114</span>, <span class="number">49</span>, <span class="number">101</span>, <span class="number">110</span>, <span class="number">84</span>, <span class="number">101</span>, <span class="number">68</span>, <span class="number">63</span>, <span class="number">33</span>, <span class="number">125</span> &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> k[<span class="number">4</span>] = &#123; <span class="number">1234</span>,<span class="number">2341</span>,<span class="number">3412</span>,<span class="number">4123</span> &#125;;</span><br><span class="line">    decrypt((<span class="type">uint32_t</span>*)&amp;v[<span class="number">3</span>] ,k);</span><br><span class="line">    decrypt((<span class="type">uint32_t</span>*)&amp;v[<span class="number">2</span>] ,k);</span><br><span class="line">    decrypt((<span class="type">uint32_t</span>*)&amp;v[<span class="number">1</span>] ,k);</span><br><span class="line">    decrypt((<span class="type">uint32_t</span>*)&amp;v[<span class="number">0</span>] ,k);</span><br><span class="line">    <span class="built_in">printf</span>(v);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="arithmetic"><a href="#arithmetic" class="headerlink" title="arithmetic"></a>arithmetic</h3><p>IDA打开数据很少，应该是有壳</p>
<p>查壳为upx，但直接使用脚本脱不了，拉近010查看字节码</p>
<p>得知被改特征</p>
<img src="5a27ce9f/Snipaste_2024-02-09_23-34-03.png" class title="Snipaste_2024-02-09_23-34-03">

<p>将三处特征改回后可以使用脚本脱，脱壳后IDA打开</p>
<p>IDA打开是一个三角形最大路径向下算法，三角形在附近中给出文件</p>
<img src="5a27ce9f/Snipaste_2024-02-14_22-14-24.png" class title="Snipaste_2024-02-14_22-14-24">

<p>flag也是最大路径的md5加密，那么我们需要得到路径</p>
<p>一般快速计算最大向下路径的算法都是自底向上的，但是这里计算路径需要自上向下</p>
<p>exp：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> **a, <span class="type">int</span> **op)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == n) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (op[i][j] != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> op[i][j];</span><br><span class="line"></span><br><span class="line">    op[i][j] = a[i][j] + max(fun(n, i + <span class="number">1</span>, j, a, op), fun(n, i + <span class="number">1</span>, j + <span class="number">1</span>, a, op));</span><br><span class="line">    <span class="keyword">return</span> op[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Find_path</span><span class="params">(<span class="type">int</span> **op, <span class="type">int</span> **a, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;路径如下：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> node = op[i - <span class="number">1</span>][j] - a[i - <span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">if</span> (node == op[i][j + <span class="number">1</span>])&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="number">2</span>);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="number">1</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the size of the triangle: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> **data = (<span class="type">int</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span> *) * n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        data[i] = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            data[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FILE *file = fopen(<span class="string">&quot;out.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error opening the file.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="built_in">fscanf</span>(file, <span class="string">&quot;%d&quot;</span>, &amp;data[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(file);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> **op = (<span class="type">int</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span> *) * n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        op[i] = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; n; x++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; n; y++)</span><br><span class="line">            op[x][y] = <span class="number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> result = fun(n, <span class="number">0</span>, <span class="number">0</span>, data, op);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最大路径是：%d\n&quot;</span>, result);</span><br><span class="line">    Find_path(op, data, n);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后得到的路径md5加密就是flag</p>
<h3 id="babyAndroid"><a href="#babyAndroid" class="headerlink" title="babyAndroid"></a>babyAndroid</h3><p>apk文件jadx打开</p>
<img src="5a27ce9f/Snipaste_2024-02-14_10-21-02.png" class title="Snipaste_2024-02-14_10-21-02">

<p>有两个函数校验username和password，其中check2是native层的方法，那么先看check1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Check1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] S = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Check1</span><span class="params">(<span class="type">byte</span>[] bArr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>.S[i] = (<span class="type">byte</span>) i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">0</span>; i3 &lt; <span class="number">256</span>; i3++) &#123;</span><br><span class="line">            <span class="type">byte</span>[] bArr2 = <span class="built_in">this</span>.S;</span><br><span class="line">            i2 = (i2 + bArr2[i3] + bArr[i3 % bArr.length]) &amp; <span class="number">255</span>;</span><br><span class="line">            swap(bArr2, i3, i2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.i = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.j = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">byte</span>[] bArr, <span class="type">int</span> i, <span class="type">int</span> i2)</span> &#123;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> bArr[i];</span><br><span class="line">        bArr[i] = bArr[i2];</span><br><span class="line">        bArr[i2] = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] encrypt(<span class="type">byte</span>[] bArr) &#123;</span><br><span class="line">        <span class="type">byte</span>[] bArr2 = <span class="keyword">new</span> <span class="title class_">byte</span>[bArr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bArr.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> (<span class="built_in">this</span>.i + <span class="number">1</span>) &amp; <span class="number">255</span>;</span><br><span class="line">            <span class="built_in">this</span>.i = i2;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="built_in">this</span>.j;</span><br><span class="line">            <span class="type">byte</span>[] bArr3 = <span class="built_in">this</span>.S;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i4</span> <span class="operator">=</span> (i3 + bArr3[i2]) &amp; <span class="number">255</span>;</span><br><span class="line">            <span class="built_in">this</span>.j = i4;</span><br><span class="line">            swap(bArr3, i2, i4);</span><br><span class="line">            <span class="type">byte</span>[] bArr4 = <span class="built_in">this</span>.S;</span><br><span class="line">            bArr2[i] = (<span class="type">byte</span>) (bArr4[(bArr4[<span class="built_in">this</span>.i] + bArr4[<span class="built_in">this</span>.j]) &amp; <span class="number">255</span>] ^ bArr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bArr2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">byte</span>[] bArr)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.equals(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;-<span class="number">75</span>, <span class="number">80</span>, <span class="number">80</span>, <span class="number">48</span>, -<span class="number">88</span>, <span class="number">75</span>, <span class="number">103</span>, <span class="number">45</span>, -<span class="number">91</span>, <span class="number">89</span>, -<span class="number">60</span>, <span class="number">91</span>, -<span class="number">54</span>, <span class="number">5</span>, <span class="number">6</span>, -<span class="number">72</span>&#125;, encrypt(bArr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个小改过的rc4，找到key对密文重新加密一遍就是解密</p>
<p>这里的key在资源文件中</p>
<p>使用apktools提取文件，在res&#x2F;value&#x2F;string.xml找到key</p>
<img src="5a27ce9f/Snipaste_2024-02-14_10-26-06.png" class title="Snipaste_2024-02-14_10-26-06">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> package0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: classes.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Check1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] S = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Check1</span><span class="params">(<span class="type">byte</span>[] bArr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>.S[i] = (<span class="type">byte</span>) i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">0</span>; i3 &lt; <span class="number">256</span>; i3++) &#123;</span><br><span class="line">            <span class="type">byte</span>[] bArr2 = <span class="built_in">this</span>.S;</span><br><span class="line">            i2 = (i2 + bArr2[i3] + bArr[i3 % bArr.length]) &amp; <span class="number">255</span>;</span><br><span class="line">            swap(bArr2, i3, i2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.i = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.j = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">byte</span>[] bArr, <span class="type">int</span> i, <span class="type">int</span> i2)</span> &#123;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> bArr[i];</span><br><span class="line">        bArr[i] = bArr[i2];</span><br><span class="line">        bArr[i2] = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] encrypt(<span class="type">byte</span>[] bArr) &#123;</span><br><span class="line">        <span class="type">byte</span>[] bArr2 = <span class="keyword">new</span> <span class="title class_">byte</span>[bArr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bArr.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> (<span class="built_in">this</span>.i + <span class="number">1</span>) &amp; <span class="number">255</span>;</span><br><span class="line">            <span class="built_in">this</span>.i = i2;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="built_in">this</span>.j;</span><br><span class="line">            <span class="type">byte</span>[] bArr3 = <span class="built_in">this</span>.S;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i4</span> <span class="operator">=</span> (i3 + bArr3[i2]) &amp; <span class="number">255</span>;</span><br><span class="line">            <span class="built_in">this</span>.j = i4;</span><br><span class="line">            swap(bArr3, i2, i4);</span><br><span class="line">            <span class="type">byte</span>[] bArr4 = <span class="built_in">this</span>.S;</span><br><span class="line">            bArr2[i] = (<span class="type">byte</span>) (bArr4[(bArr4[<span class="built_in">this</span>.i] + bArr4[<span class="built_in">this</span>.j]) &amp; <span class="number">255</span>] ^ bArr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bArr2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">check</span><span class="params">(<span class="type">byte</span>[] bArr)</span> &#123;</span><br><span class="line">        System.out.println(Arrays.toString(encrypt(bArr)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;3e1fel&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] keyBytes = key.getBytes();</span><br><span class="line">        <span class="type">Check1</span> <span class="variable">rc4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Check1</span>(keyBytes);</span><br><span class="line">        <span class="type">byte</span>[] encryptedData = &#123;-<span class="number">75</span>, <span class="number">80</span>, <span class="number">80</span>, <span class="number">48</span>, -<span class="number">88</span>, <span class="number">75</span>, <span class="number">103</span>, <span class="number">45</span>, -<span class="number">91</span>, <span class="number">89</span>, -<span class="number">60</span>, <span class="number">91</span>, -<span class="number">54</span>, <span class="number">5</span>, <span class="number">6</span>, -<span class="number">72</span>&#125;;</span><br><span class="line">        <span class="type">byte</span>[] decryptedData = rc4.encrypt(encryptedData);</span><br><span class="line">        System.out.println(Arrays.toString(decryptedData));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#G&gt;IkH&lt;aHu5FE3GSV</span><br></pre></td></tr></table></figure>

<p>回到main方法分析check2，是native层的方法，使用IDA打开apktools分解出来的lib中的.so文件</p>
<img src="5a27ce9f/Snipaste_2024-02-14_10-30-44.png" class title="Snipaste_2024-02-14_10-30-44">

<p>应该是aes256加密，那么因为check2传入了username和password</p>
<p>猜测username就是key，cyberchef解密</p>
<img src="5a27ce9f/Snipaste_2024-02-14_10-32-39.png" class title="Snipaste_2024-02-14_10-32-39">



<h3 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h3><p>虚拟机逆向，IDA打开分析</p>
<img src="5a27ce9f/Snipaste_2024-02-14_22-21-52.png" class title="Snipaste_2024-02-14_22-21-52">

<p>首先查看<code>sub_5630D3194708()</code>函数</p>
<img src="5a27ce9f/Snipaste_2024-02-14_22-36-31.png" class title="Snipaste_2024-02-14_22-36-31">

<p>这里是输入flag，并且在flag后又增加一个值为249的内容</p>
<p>主函数中<code>signal(8, handler);</code>函数，是有浮点异常时执行handler</p>
<img src="5a27ce9f/Snipaste_2024-02-14_22-38-29.png" class title="Snipaste_2024-02-14_22-38-29">

<p>handler函数中，是对刚刚flag最后追加的249执行+1的操作，也就是说抛出异常时249就会+1</p>
<p>那么动调起来看看有没有异常</p>
<img src="5a27ce9f/Snipaste_2024-02-15_15-28-33.png" class title="Snipaste_2024-02-15_15-28-33">

<p>果然有异常，那么flag后追加的内容就是250</p>
<p>回到main函数继续分析</p>
<p>四个线程对flag进行加密，最后<code>sub_5630D3194803()</code>校验flag</p>
<p>这里先对几个函数进行解释</p>
<p><code>sem_init</code>:对由sem指定的信号量进行初始化</p>
<p><code>sem</code>:为指向信号量结构的一个指针</p>
<p><code>sem_post</code>:用来增加信号量的值</p>
<p><code>sem_wait</code>:用来阻塞当前线程直到信号量sem的值大于0，解除阻塞后将sem的值减一</p>
<p>那么现在先进入第一个加密函数进行分析</p>
<img src="5a27ce9f/Snipaste_2024-02-14_22-27-18.png" class title="Snipaste_2024-02-14_22-27-18">

<p>第一个加密函数先用<code>sem_wait</code>函数对sem进行-1然后执行加密</p>
<p>加密结束后使用<code>sem_post</code>来增加下一个加密函数的信号量，即进行下一个函数的加密</p>
<p>那么依次加密，我们看到最后一个加密函数</p>
<img src="5a27ce9f/Snipaste_2024-02-14_22-30-08.png" class title="Snipaste_2024-02-14_22-30-08">

<p>最后一个加密函数又使用<code>sem_post</code>增加第一个加密函数的信号量</p>
<p>因此构成循环，逐个对flag进行加密，总共32字节</p>
<p>其中每个加密函数中<code>&amp;dword_5630D31970A0</code>是一个key数组，并且真正的key需要动调才可以拿到</p>
<p>在主函数中有对key的异或加密，因此需要对key进行异或后才是真正的key</p>
<p>从前往后加密，从后往前解密</p>
<p>exp：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> key[] = &#123;<span class="number">119</span>, <span class="number">116</span>, <span class="number">120</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">105</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> enc[<span class="number">33</span>] = &#123;<span class="number">12052</span>, <span class="number">78</span>, <span class="number">20467</span>, <span class="number">109</span>, <span class="number">13016</span>, <span class="number">109</span>, <span class="number">27467</span>, <span class="number">-110</span>, <span class="number">9807</span>, <span class="number">91</span>, <span class="number">21243</span>, <span class="number">-100</span>, <span class="number">11121</span>, <span class="number">20</span>, <span class="number">10863</span>, <span class="number">-107</span>, <span class="number">10490</span>, <span class="number">29</span>, <span class="number">10633</span>, <span class="number">-101</span>, <span class="number">10420</span>, <span class="number">78</span>, <span class="number">17670</span>, <span class="number">-38</span>, <span class="number">6011</span>, <span class="number">-4</span>, <span class="number">16590</span>, <span class="number">125</span>, <span class="number">10723</span>, <span class="number">15</span>, <span class="number">7953</span>, <span class="number">255</span>, <span class="number">250</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">28</span>; i &gt;= <span class="number">0</span>; i -= <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        enc[i + <span class="number">3</span>] = enc[i + <span class="number">3</span>] ^ (enc[i + <span class="number">4</span>] - key[(i + <span class="number">4</span>) % <span class="number">6</span>]);</span><br><span class="line">        enc[i + <span class="number">2</span>] = enc[i + <span class="number">2</span>] / (enc[i + <span class="number">3</span>] + key[(i + <span class="number">3</span>) % <span class="number">6</span>]);</span><br><span class="line">        enc[i + <span class="number">1</span>] = enc[i + <span class="number">1</span>] + (enc[i + <span class="number">2</span>] ^ key[(i + <span class="number">2</span>) % <span class="number">6</span>]);</span><br><span class="line">        enc[i + <span class="number">0</span>] = enc[i + <span class="number">0</span>] - (enc[i + <span class="number">1</span>] * key[(i + <span class="number">1</span>) % <span class="number">6</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, enc[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="midRSA"><a href="#midRSA" class="headerlink" title="midRSA"></a>midRSA</h3><p>midRSA.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">padding</span>(<span class="params">flag</span>):</span><br><span class="line">    <span class="keyword">return</span> flag+<span class="string">b&#x27;\xff&#x27;</span>*(<span class="number">64</span>-<span class="built_in">len</span>(flag))</span><br><span class="line"></span><br><span class="line">flag=padding(flag)</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">p=getPrime(<span class="number">512</span>)</span><br><span class="line">q=getPrime(<span class="number">512</span>)</span><br><span class="line">e=<span class="number">3</span></span><br><span class="line">n=p*q</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line">m0=m&gt;&gt;<span class="number">208</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n=<span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;m0=<span class="subst">&#123;m0&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n=120838778421252867808799302603972821425274682456261749029016472234934876266617266346399909705742862458970575637664059189613618956880430078774892479256301209695323302787221508556481196281420676074116272495278097275927604857336484564777404497914572606299810384987412594844071935546690819906920254004045391585427</span></span><br><span class="line"><span class="string">c=118961547254465282603128910126369011072248057317653811110746611348016137361383017921465395766977129601435508590006599755740818071303929227578504412967513468921191689357367045286190040251695094706564443721393216185563727951256414649625597950957960429709583109707961019498084511008637686004730015209939219983527</span></span><br><span class="line"><span class="string">m0=13292147408567087351580732082961640130543313742210409432471625281702327748963274496942276607</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>m高位泄露，直接解了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">n=<span class="number">120838778421252867808799302603972821425274682456261749029016472234934876266617266346399909705742862458970575637664059189613618956880430078774892479256301209695323302787221508556481196281420676074116272495278097275927604857336484564777404497914572606299810384987412594844071935546690819906920254004045391585427</span></span><br><span class="line">c=<span class="number">118961547254465282603128910126369011072248057317653811110746611348016137361383017921465395766977129601435508590006599755740818071303929227578504412967513468921191689357367045286190040251695094706564443721393216185563727951256414649625597950957960429709583109707961019498084511008637686004730015209939219983527</span></span><br><span class="line">m_high=<span class="number">13292147408567087351580732082961640130543313742210409432471625281702327748963274496942276607</span> </span><br><span class="line">m_high &lt;&lt;= <span class="number">208</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">m = m_high + x</span><br><span class="line">f = m^e - c</span><br><span class="line">f = f.monic()</span><br><span class="line"></span><br><span class="line">x = f.small_roots(X = <span class="number">2</span>^<span class="number">208</span>,beta = <span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    m = m_high + x[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure>



<h3 id="midRSA-revenge"><a href="#midRSA-revenge" class="headerlink" title="midRSA revenge"></a>midRSA revenge</h3><p>attachment.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q=getPrime(<span class="number">1024</span>)</span><br><span class="line">e=<span class="number">5</span></span><br><span class="line">n=p*q</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line">m0=m&gt;&gt;<span class="number">128</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n=<span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;m0=<span class="subst">&#123;m0&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n=27814334728135671995890378154778822687713875269624843122353458059697288888640572922486287556431241786461159513236128914176680497775619694684903498070577307810263677280294114135929708745988406963307279767028969515305895207028282193547356414827419008393701158467818535109517213088920890236300281646288761697842280633285355376389468360033584102258243058885174812018295460196515483819254913183079496947309574392848378504246991546781252139861876509894476420525317251695953355755164789878602945615879965709871975770823484418665634050103852564819575756950047691205355599004786541600213204423145854859214897431430282333052121</span></span><br><span class="line"><span class="string">c=456221314115867088638207203034494636244706611111621723577848729096069230067958132663018625661447131501758684502639383208332844681939698124459188571813527149772292464139530736717619741704945926075632064072125361516435631121845753186559297993355270779818057702973783391589851159114029310296551701456748698914231344835187917559305440269560613326893204748127999254902102919605370363889581136724164096879573173870280806620454087466970358998654736755257023225078147018537101</span></span><br><span class="line"><span class="string">m0=9999900281003357773420310681169330823266532533803905637</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>同上，exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">n=<span class="number">27814334728135671995890378154778822687713875269624843122353458059697288888640572922486287556431241786461159513236128914176680497775619694684903498070577307810263677280294114135929708745988406963307279767028969515305895207028282193547356414827419008393701158467818535109517213088920890236300281646288761697842280633285355376389468360033584102258243058885174812018295460196515483819254913183079496947309574392848378504246991546781252139861876509894476420525317251695953355755164789878602945615879965709871975770823484418665634050103852564819575756950047691205355599004786541600213204423145854859214897431430282333052121</span></span><br><span class="line">c=<span class="number">456221314115867088638207203034494636244706611111621723577848729096069230067958132663018625661447131501758684502639383208332844681939698124459188571813527149772292464139530736717619741704945926075632064072125361516435631121845753186559297993355270779818057702973783391589851159114029310296551701456748698914231344835187917559305440269560613326893204748127999254902102919605370363889581136724164096879573173870280806620454087466970358998654736755257023225078147018537101</span></span><br><span class="line">m_high=<span class="number">9999900281003357773420310681169330823266532533803905637</span> </span><br><span class="line">m_high &lt;&lt;= <span class="number">128</span></span><br><span class="line">e = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">m = m_high + x</span><br><span class="line">f = m^e - c</span><br><span class="line">f = f.monic()</span><br><span class="line"></span><br><span class="line">x = f.small_roots(X = <span class="number">2</span>^<span class="number">208</span>,beta = <span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    m = m_high + x[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure>



<h3 id="backpack"><a href="#backpack" class="headerlink" title="backpack"></a>backpack</h3><p>attachment.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">a=[getPrime(<span class="number">32</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line">p=random.getrandbits(<span class="number">32</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(p)[<span class="number">2</span>:])==<span class="number">32</span></span><br><span class="line">bag=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    temp=p%<span class="number">2</span></span><br><span class="line">    bag+=temp*i</span><br><span class="line">    p=p&gt;&gt;<span class="number">1</span></span><br><span class="line"></span><br><span class="line">enc=bytes_to_long(flag)^p</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc=<span class="subst">&#123;enc&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;bag=<span class="subst">&#123;bag&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">enc=871114172567853490297478570113449366988793760172844644007566824913350088148162949968812541218339</span></span><br><span class="line"><span class="string">a=[3245882327, 3130355629, 2432460301, 3249504299, 3762436129, 3056281051, 3484499099, 2830291609, 3349739489, 2847095593, 3532332619, 2406839203, 4056647633, 3204059951, 3795219419, 3240880339, 2668368499, 4227862747, 2939444527, 3375243559]</span></span><br><span class="line"><span class="string">bag=45893025064</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>背包密码</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">enc = <span class="number">871114172567853490297478570113449366988793760172844644007566824913350088148162949968812541218339</span></span><br><span class="line">M = [<span class="number">3245882327</span>, <span class="number">3130355629</span>, <span class="number">2432460301</span>, <span class="number">3249504299</span>, <span class="number">3762436129</span>, <span class="number">3056281051</span>, <span class="number">3484499099</span>, <span class="number">2830291609</span>, <span class="number">3349739489</span>, <span class="number">2847095593</span>, <span class="number">3532332619</span>, <span class="number">2406839203</span>, <span class="number">4056647633</span>, <span class="number">3204059951</span>, <span class="number">3795219419</span>, <span class="number">3240880339</span>, <span class="number">2668368499</span>, <span class="number">4227862747</span>, <span class="number">2939444527</span>, <span class="number">3375243559</span>]</span><br><span class="line">S = <span class="number">45893025064</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(M)</span><br><span class="line">Ge = Matrix.identity(n)</span><br><span class="line">last_row = [<span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">Ge_last_row = Matrix(ZZ, <span class="number">1</span>, <span class="built_in">len</span>(last_row), last_row)</span><br><span class="line"></span><br><span class="line">last_col = M[:]</span><br><span class="line">last_col.append(S)</span><br><span class="line">Ge_last_col = Matrix(ZZ, <span class="built_in">len</span>(last_col), <span class="number">1</span>, last_col)</span><br><span class="line"></span><br><span class="line">Ge = Ge.stack(Ge_last_row)</span><br><span class="line">Ge = Ge.augment(Ge_last_col)</span><br><span class="line"></span><br><span class="line">X = Ge.LLL()[-<span class="number">1</span>]</span><br><span class="line">X = X[:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">p = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> X:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">abs</span>(i) == <span class="number">1</span>:</span><br><span class="line">        p += <span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">abs</span>(i) == <span class="number">0</span>:</span><br><span class="line">        p += <span class="string">&quot;0&quot;</span></span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line">m = <span class="built_in">int</span>(p,<span class="number">2</span>) ^^ enc</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">flag = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(<span class="built_in">int</span>(m))[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>非预期：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">enc=<span class="number">871114172567853490297478570113449366988793760172844644007566824913350088148162949968812541218339</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(enc))</span><br></pre></td></tr></table></figure>



<h3 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h3><p>attachment.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,e</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">p=getPrime(<span class="number">64</span>)</span><br><span class="line">q=getPrime(<span class="number">256</span>)</span><br><span class="line">n=p**<span class="number">4</span>*q</span><br><span class="line">k=getPrime(<span class="number">16</span>)</span><br><span class="line">gift=<span class="built_in">pow</span>(e+<span class="number">114514</span>+p**k,<span class="number">0x10001</span>,p)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p=<span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;q=<span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;gift=<span class="subst">&#123;gift&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">p=14213355454944773291</span></span><br><span class="line"><span class="string">q=61843562051620700386348551175371930486064978441159200765618339743764001033297</span></span><br><span class="line"><span class="string">c=105002138722466946495936638656038214000043475751639025085255113965088749272461906892586616250264922348192496597986452786281151156436229574065193965422841</span></span><br><span class="line"><span class="string">gift=9751789326354522940</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>使用nth_root解</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">14213355454944773291</span></span><br><span class="line">q = <span class="number">61843562051620700386348551175371930486064978441159200765618339743764001033297</span></span><br><span class="line">c = <span class="number">105002138722466946495936638656038214000043475751639025085255113965088749272461906892586616250264922348192496597986452786281151156436229574065193965422841</span></span><br><span class="line">gift = <span class="number">9751789326354522940</span></span><br><span class="line"></span><br><span class="line">n = p**<span class="number">4</span>*q</span><br><span class="line">d = gmpy2.invert(<span class="number">65537</span>,p-<span class="number">1</span>)</span><br><span class="line">temp = <span class="built_in">pow</span>(gift,d,p)</span><br><span class="line">e = temp - <span class="number">114514</span></span><br><span class="line">res = Zmod(n)(c).nth_root(e, <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> res:</span><br><span class="line">    flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&quot;hgame&quot;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>



<h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="ek1ng-want-girlfriend"><a href="#ek1ng-want-girlfriend" class="headerlink" title="ek1ng_want_girlfriend"></a>ek1ng_want_girlfriend</h3><p>wireshark打开</p>
<img src="5a27ce9f/Snipaste_2024-02-15_15-33-06.png" class title="Snipaste_2024-02-15_15-33-06">

<img src="5a27ce9f/Snipaste_2024-02-09_23-20-08.png" class title="Snipaste_2024-02-09_23-20-08">

<p>追踪http，后导出字节流</p>
<p>得到flag</p>
<img src="5a27ce9f/1.jpg" class width="1">



<h3 id="ezWord"><a href="#ezWord" class="headerlink" title="ezWord"></a>ezWord</h3><p>010打开为PK开头，是一个压缩包</p>
<p>改zip后缀后解压找到关键文件</p>
<img src="5a27ce9f/Snipaste_2024-02-09_23-23-17.png" class title="Snipaste_2024-02-09_23-23-17">

<p>根据hint是盲水印，解出来后得到压缩包密码（这里第一次做盲水印题，对老脚本里的随机函数需要进行修改，卡了好久）</p>
<img src="5a27ce9f/22d931af12d171b249022147f5c71c72.png" class title="22d931af12d171b249022147f5c71c72">

<p>将脚本里的random中的参数给删除</p>
<img src="5a27ce9f/Snipaste_2024-02-15_15-38-24.png" class title="Snipaste_2024-02-15_15-38-24">

<p>得到key</p>
<img src="5a27ce9f/Snipaste_2024-02-09_23-26-49.png" class title="Snipaste_2024-02-09_23-26-49">

<p>解开压缩包后难道一堆乱七八糟的英文，上网查出来是fake加密</p>
<img src="5a27ce9f/Snipaste_2024-02-15_15-41-00.png" class title="Snipaste_2024-02-15_15-41-00">

<p>解密后得到一堆中文乱码</p>
<p><code>籱籰籪籶籮粄簹籴籨粂籸籾籨籼簹籵籿籮籨籪籵簺籨籽籱簼籨籼籮籬类簼籽粆</code></p>
<p>刚开始有想到Unicode，但是没解出来</p>
<p>后面根据出题人提示得知rot8000（这里看见中文的字符应该就要考虑是不是Unicode偏移，密文的Unicode偏移多少会到hgame），解出flag</p>
]]></content>
      <categories>
        <category>WP</category>
      </categories>
      <tags>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>HGAME—2024—week4</title>
    <url>/post/b3446baa.html</url>
    <content><![CDATA[<p>HGAME 2024网络攻防大赛—week4部分题目题解</p>
<span id="more"></span>

<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><h3 id="change"><a href="#change" class="headerlink" title="change"></a>change</h3><p>IDA打开，又是一个cpp程序</p>
<img src="b3446baa/image-20240301175715211.png" class title="image-20240301175715211">

<p>先看一下main函数</p>
<p>先赋值一个字符串<code>am2qasl</code>给v10，后读入flag，经过<code>sub_1400029A0</code>函数的加密，最后和密文<code>byte_140008000</code>比较，逻辑很清晰，进入<code>sub_1400029A0</code>函数看看</p>
<img src="b3446baa/image-20240301180012995.png" class title="image-20240301180012995">

<p>加密就是在奇偶位调用不同的异或，为奇则<code>a2 ^ a1</code>，为偶则<code>(a2 ^ a1) + 10</code></p>
<p>这里的a1，a2应该分别就是flag和上面的字符串<code>am2qasl</code></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v = [<span class="number">0x13</span>, <span class="number">0x0A</span>, <span class="number">0x5D</span>, <span class="number">0x1C</span>, <span class="number">0x0E</span>, <span class="number">0x08</span>, <span class="number">0x23</span>, <span class="number">0x06</span>, <span class="number">0x0B</span>, <span class="number">0x4B</span>,</span><br><span class="line">     <span class="number">0x38</span>, <span class="number">0x22</span>, <span class="number">0x0D</span>, <span class="number">0x1C</span>, <span class="number">0x48</span>, <span class="number">0x0C</span>, <span class="number">0x66</span>, <span class="number">0x15</span>, <span class="number">0x48</span>, <span class="number">0x1B</span>,</span><br><span class="line">     <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x10</span>, <span class="number">0x4F</span>]</span><br><span class="line">s = <span class="string">&quot;am2qasl&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(s[i % <span class="number">7</span>]) ^ (v[i] - <span class="number">10</span>)), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(s[i % <span class="number">7</span>]) ^ (v[i])), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="again"><a href="#again" class="headerlink" title="again!"></a>again!</h3><p>是python逆向，首先先对exe解包，拿到pyc文件</p>
<p>但是发现pyc文件无法反编译，这个时候需要通过查看字节码来知道程序的逻辑</p>
<p>使用如下脚本查看字节码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dis,marshal</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;bin1.pyc&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">code=marshal.loads(f[<span class="number">16</span>:])</span><br><span class="line">dis.dis(code)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="number">0</span>           <span class="number">0</span> RESUME                   <span class="number">0</span></span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>           <span class="number">2</span> LOAD_CONST               <span class="number">0</span> (<span class="number">0</span>)</span><br><span class="line">             <span class="number">4</span> LOAD_CONST               <span class="number">1</span> (<span class="literal">None</span>)</span><br><span class="line">             <span class="number">6</span> IMPORT_NAME              <span class="number">0</span> (hashlib)</span><br><span class="line">             <span class="number">8</span> STORE_NAME               <span class="number">0</span> (hashlib)</span><br><span class="line"></span><br><span class="line"> <span class="number">2</span>          <span class="number">10</span> PUSH_NULL</span><br><span class="line">            <span class="number">12</span> LOAD_NAME                <span class="number">1</span> (<span class="built_in">print</span>)</span><br><span class="line">            <span class="number">14</span> LOAD_CONST               <span class="number">2</span> (<span class="string">&#x27;you should use this execute file to decrypt &quot;bin2&quot;&#x27;</span>)</span><br><span class="line">            <span class="number">16</span> PRECALL                  <span class="number">1</span></span><br><span class="line">            <span class="number">20</span> CALL                     <span class="number">1</span></span><br><span class="line">            <span class="number">30</span> POP_TOP</span><br><span class="line"></span><br><span class="line"> <span class="number">3</span>          <span class="number">32</span> PUSH_NULL</span><br><span class="line">            <span class="number">34</span> LOAD_NAME                <span class="number">1</span> (<span class="built_in">print</span>)</span><br><span class="line">            <span class="number">36</span> LOAD_CONST               <span class="number">3</span> (<span class="string">&#x27;hint:md5&#x27;</span>)</span><br><span class="line">            <span class="number">38</span> PRECALL                  <span class="number">1</span></span><br><span class="line">            <span class="number">42</span> CALL                     <span class="number">1</span></span><br><span class="line">            <span class="number">52</span> POP_TOP</span><br><span class="line"></span><br><span class="line"> <span class="number">4</span>          <span class="number">54</span> PUSH_NULL</span><br><span class="line">            <span class="number">56</span> LOAD_NAME                <span class="number">2</span> (<span class="built_in">bytearray</span>)</span><br><span class="line">            <span class="number">58</span> PRECALL                  <span class="number">0</span></span><br><span class="line">            <span class="number">62</span> CALL                     <span class="number">0</span></span><br><span class="line">            <span class="number">72</span> STORE_NAME               <span class="number">3</span> (s)</span><br><span class="line"></span><br><span class="line"> <span class="number">5</span>          <span class="number">74</span> PUSH_NULL</span><br><span class="line">            <span class="number">76</span> LOAD_NAME                <span class="number">2</span> (<span class="built_in">bytearray</span>)</span><br><span class="line">            <span class="number">78</span> PUSH_NULL</span><br><span class="line">            <span class="number">80</span> LOAD_NAME                <span class="number">4</span> (<span class="built_in">open</span>)</span><br><span class="line">            <span class="number">82</span> LOAD_CONST               <span class="number">4</span> (<span class="string">&#x27;bin1.pyc&#x27;</span>)</span><br><span class="line">            <span class="number">84</span> LOAD_CONST               <span class="number">5</span> (<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">            <span class="number">86</span> PRECALL                  <span class="number">2</span></span><br><span class="line">            <span class="number">90</span> CALL                     <span class="number">2</span></span><br><span class="line">           <span class="number">100</span> LOAD_METHOD              <span class="number">5</span> (read)</span><br><span class="line">           <span class="number">122</span> PRECALL                  <span class="number">0</span></span><br><span class="line">           <span class="number">126</span> CALL                     <span class="number">0</span></span><br><span class="line">           <span class="number">136</span> PRECALL                  <span class="number">1</span></span><br><span class="line">           <span class="number">140</span> CALL                     <span class="number">1</span></span><br><span class="line">           <span class="number">150</span> STORE_NAME               <span class="number">6</span> (f)</span><br><span class="line"></span><br><span class="line"> <span class="number">6</span>         <span class="number">152</span> LOAD_CONST               <span class="number">6</span> (<span class="string">&#x27;jkasnwojasd&#x27;</span>)</span><br><span class="line">           <span class="number">154</span> STORE_NAME               <span class="number">7</span> (t)</span><br><span class="line"></span><br><span class="line"> <span class="number">8</span>         <span class="number">156</span> PUSH_NULL</span><br><span class="line">           <span class="number">158</span> LOAD_NAME                <span class="number">8</span> (<span class="built_in">range</span>)</span><br><span class="line">           <span class="number">160</span> LOAD_CONST               <span class="number">0</span> (<span class="number">0</span>)</span><br><span class="line">           <span class="number">162</span> LOAD_CONST               <span class="number">7</span> (<span class="number">15</span>)</span><br><span class="line">           <span class="number">164</span> PRECALL                  <span class="number">2</span></span><br><span class="line">           <span class="number">168</span> CALL                     <span class="number">2</span></span><br><span class="line">           <span class="number">178</span> GET_ITER</span><br><span class="line">       &gt;&gt;  <span class="number">180</span> FOR_ITER               <span class="number">106</span> (to <span class="number">394</span>)</span><br><span class="line">           <span class="number">182</span> STORE_NAME               <span class="number">9</span> (i)</span><br><span class="line"></span><br><span class="line"> <span class="number">9</span>         <span class="number">184</span> LOAD_NAME                <span class="number">6</span> (f)</span><br><span class="line">           <span class="number">186</span> LOAD_NAME                <span class="number">9</span> (i)</span><br><span class="line">           <span class="number">188</span> BINARY_SUBSCR</span><br><span class="line">           <span class="number">198</span> LOAD_NAME                <span class="number">6</span> (f)</span><br><span class="line">           <span class="number">200</span> LOAD_NAME                <span class="number">9</span> (i)</span><br><span class="line">           <span class="number">202</span> LOAD_CONST               <span class="number">8</span> (<span class="number">6</span>)</span><br><span class="line">           <span class="number">204</span> BINARY_OP                <span class="number">6</span> (%)</span><br><span class="line">           <span class="number">208</span> BINARY_SUBSCR</span><br><span class="line">           <span class="number">218</span> BINARY_OP                <span class="number">0</span> (+)</span><br><span class="line">           <span class="number">222</span> PUSH_NULL</span><br><span class="line">           <span class="number">224</span> LOAD_NAME               <span class="number">10</span> (<span class="built_in">ord</span>)</span><br><span class="line">           <span class="number">226</span> LOAD_NAME                <span class="number">7</span> (t)</span><br><span class="line">           <span class="number">228</span> LOAD_NAME                <span class="number">9</span> (i)</span><br><span class="line">           <span class="number">230</span> LOAD_CONST               <span class="number">8</span> (<span class="number">6</span>)</span><br><span class="line">           <span class="number">232</span> BINARY_OP                <span class="number">6</span> (%)</span><br><span class="line">           <span class="number">236</span> BINARY_SUBSCR</span><br><span class="line">           <span class="number">246</span> PRECALL                  <span class="number">1</span></span><br><span class="line">           <span class="number">250</span> CALL                     <span class="number">1</span></span><br><span class="line">           <span class="number">260</span> PUSH_NULL</span><br><span class="line">           <span class="number">262</span> LOAD_NAME               <span class="number">10</span> (<span class="built_in">ord</span>)</span><br><span class="line">           <span class="number">264</span> LOAD_NAME                <span class="number">7</span> (t)</span><br><span class="line">           <span class="number">266</span> LOAD_NAME                <span class="number">9</span> (i)</span><br><span class="line">           <span class="number">268</span> PUSH_NULL</span><br><span class="line">           <span class="number">270</span> LOAD_NAME               <span class="number">11</span> (<span class="built_in">len</span>)</span><br><span class="line">           <span class="number">272</span> LOAD_NAME                <span class="number">7</span> (t)</span><br><span class="line">           <span class="number">274</span> PRECALL                  <span class="number">1</span></span><br><span class="line">           <span class="number">278</span> CALL                     <span class="number">1</span></span><br><span class="line">           <span class="number">288</span> BINARY_OP                <span class="number">6</span> (%)</span><br><span class="line">           <span class="number">292</span> BINARY_SUBSCR</span><br><span class="line">           <span class="number">302</span> PRECALL                  <span class="number">1</span></span><br><span class="line">           <span class="number">306</span> CALL                     <span class="number">1</span></span><br><span class="line">           <span class="number">316</span> BINARY_OP                <span class="number">0</span> (+)</span><br><span class="line">           <span class="number">320</span> BINARY_OP               <span class="number">12</span> (^)</span><br><span class="line">           <span class="number">324</span> LOAD_CONST               <span class="number">9</span> (<span class="number">256</span>)</span><br><span class="line">           <span class="number">326</span> BINARY_OP                <span class="number">6</span> (%)</span><br><span class="line">           <span class="number">330</span> LOAD_NAME                <span class="number">6</span> (f)</span><br><span class="line">           <span class="number">332</span> LOAD_NAME                <span class="number">9</span> (i)</span><br><span class="line">           <span class="number">334</span> STORE_SUBSCR</span><br><span class="line"></span><br><span class="line"><span class="number">10</span>         <span class="number">338</span> LOAD_NAME                <span class="number">3</span> (s)</span><br><span class="line">           <span class="number">340</span> LOAD_METHOD             <span class="number">12</span> (append)</span><br><span class="line">           <span class="number">362</span> LOAD_NAME                <span class="number">6</span> (f)</span><br><span class="line">           <span class="number">364</span> LOAD_NAME                <span class="number">9</span> (i)</span><br><span class="line">           <span class="number">366</span> BINARY_SUBSCR</span><br><span class="line">           <span class="number">376</span> PRECALL                  <span class="number">1</span></span><br><span class="line">           <span class="number">380</span> CALL                     <span class="number">1</span></span><br><span class="line">           <span class="number">390</span> POP_TOP</span><br><span class="line">           <span class="number">392</span> JUMP_BACKWARD          <span class="number">107</span> (to <span class="number">180</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">12</span>     &gt;&gt;  <span class="number">394</span> PUSH_NULL</span><br><span class="line">           <span class="number">396</span> LOAD_NAME                <span class="number">1</span> (<span class="built_in">print</span>)</span><br><span class="line">           <span class="number">398</span> LOAD_NAME                <span class="number">3</span> (s)</span><br><span class="line">           <span class="number">400</span> PRECALL                  <span class="number">1</span></span><br><span class="line">           <span class="number">404</span> CALL                     <span class="number">1</span></span><br><span class="line">           <span class="number">414</span> POP_TOP</span><br><span class="line"></span><br><span class="line"><span class="number">13</span>         <span class="number">416</span> PUSH_NULL</span><br><span class="line">           <span class="number">418</span> LOAD_NAME                <span class="number">0</span> (hashlib)</span><br><span class="line">           <span class="number">420</span> LOAD_ATTR               <span class="number">13</span> (md5)</span><br><span class="line">           <span class="number">430</span> PUSH_NULL</span><br><span class="line">           <span class="number">432</span> LOAD_NAME               <span class="number">14</span> (<span class="built_in">bytes</span>)</span><br><span class="line">           <span class="number">434</span> LOAD_NAME                <span class="number">3</span> (s)</span><br><span class="line">           <span class="number">436</span> PRECALL                  <span class="number">1</span></span><br><span class="line">           <span class="number">440</span> CALL                     <span class="number">1</span></span><br><span class="line">           <span class="number">450</span> PRECALL                  <span class="number">1</span></span><br><span class="line">           <span class="number">454</span> CALL                     <span class="number">1</span></span><br><span class="line">           <span class="number">464</span> LOAD_METHOD             <span class="number">15</span> (hexdigest)</span><br><span class="line">           <span class="number">486</span> PRECALL                  <span class="number">0</span></span><br><span class="line">           <span class="number">490</span> CALL                     <span class="number">0</span></span><br><span class="line">           <span class="number">500</span> STORE_NAME              <span class="number">16</span> (md5_hash)</span><br><span class="line">           <span class="number">502</span> LOAD_CONST               <span class="number">1</span> (<span class="literal">None</span>)</span><br><span class="line">           <span class="number">504</span> RETURN_VALUE</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这段字节码经过翻译后如下所示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;you should use this execute file to decrypt &quot;bin2&quot;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hint:md5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">bytearray</span>()</span><br><span class="line">f = <span class="built_in">bytearray</span>(<span class="built_in">open</span>(<span class="string">&#x27;bin1.pyc&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read())</span><br><span class="line">t = <span class="string">&#x27;jkasnwojasd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">15</span>):</span><br><span class="line">    f[i] = ((f[i] + f[i % <span class="number">6</span>]) ^ (<span class="built_in">ord</span>(t[i % <span class="number">6</span>]) + <span class="built_in">ord</span>(t[i % <span class="built_in">len</span>(t)]))) % <span class="number">256</span></span><br><span class="line">    s.append(f[i])</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">md5_hash = hashlib.md5(<span class="built_in">bytes</span>(s)).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(md5_hash)</span><br></pre></td></tr></table></figure>

<p>这个时候执行这个脚本，会得到一个md5<code>a405b5d321e446459d8f9169d027bd92</code></p>
<p>之后考虑对bin2解密，用010查看bin2时会发现文件中有许多与md5类似的内容，猜测这串md5与bin2异或可以得到所需要的可执行程序</p>
<p> 先用bin2的文件头与md5第一位xor，得到”M”，第二位则得到”Z”，那么应该就如上面所猜测一样，将md5与bin2异或后可以得到我们所需要的exe</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = <span class="string">&#x27;a405b5d321e446459d8f9169d027bd92&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;bin2&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = <span class="built_in">bytearray</span>(f.read())</span><br><span class="line"></span><br><span class="line">result = <span class="built_in">bytearray</span>(b ^ <span class="built_in">ord</span>(t[i % <span class="built_in">len</span>(t)]) <span class="keyword">for</span> i, b <span class="keyword">in</span> <span class="built_in">enumerate</span>(data))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.exe&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(result)</span><br></pre></td></tr></table></figure>

<p>将得到的exe用IDA打开</p>
<img src="b3446baa/image-20240301181022547.png" class title="image-20240301181022547">

<p>加密函数为<code>sub_1400010E0</code></p>
<img src="b3446baa/image-20240301181050913.png" class title="image-20240301181050913">

<p>是一个xxtea，那么main函数中的<code>v7</code>就是key，密文也已经有了，直接用xxtea脚本解</p>
<p>exp：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x7937B99E</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX ((sum ^ y) + (k[(p&amp;3)^e] ^ z)) ^ (((16 * z) ^ (y &gt;&gt; 3)) + ((z &gt;&gt; 5) ^ (4 * y)))</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n, <span class="type">uint32_t</span>* k)</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">    rounds = <span class="number">12</span>;</span><br><span class="line">    sum = rounds*DELTA;</span><br><span class="line">    y = v[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=n<span class="number">-1</span>; p&gt;<span class="number">0</span>; p--)</span><br><span class="line">            &#123;</span><br><span class="line">                z = v[p<span class="number">-1</span>];</span><br><span class="line">                y = v[p] -= MX;</span><br><span class="line">            &#125;</span><br><span class="line">            z = v[n<span class="number">-1</span>];</span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">            sum -= DELTA;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> j,m;</span><br><span class="line">    <span class="type">uint8_t</span> v[<span class="number">33</span>] = &#123; <span class="number">0xC3</span>, <span class="number">0xB5</span>, <span class="number">0x6F</span>, <span class="number">0x50</span>, <span class="number">0x45</span>, <span class="number">0x8F</span>, <span class="number">0x35</span>, <span class="number">0xB9</span>, <span class="number">0xC7</span>, <span class="number">0xE8</span>, </span><br><span class="line">  <span class="number">0x1A</span>, <span class="number">0xC9</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0x20</span>, <span class="number">0x38</span>, <span class="number">0x83</span>, <span class="number">0xBA</span>, <span class="number">0x3A</span>, <span class="number">0xD1</span>, </span><br><span class="line">  <span class="number">0x54</span>, <span class="number">0xF5</span>, <span class="number">0x5C</span>, <span class="number">0x97</span>, <span class="number">0x6B</span>, <span class="number">0x03</span>, <span class="number">0x52</span>, <span class="number">0x43</span>, <span class="number">0x47</span>, <span class="number">0x04</span>, </span><br><span class="line">  <span class="number">0xD2</span>, <span class="number">0x1C</span>&#125;;</span><br><span class="line">    <span class="type">uint32_t</span> k[<span class="number">4</span>] = &#123; <span class="number">0x1234</span>, <span class="number">0x2341</span>, <span class="number">0x3412</span>, <span class="number">0x4123</span>&#125;;</span><br><span class="line">    decrypt(v, <span class="number">8</span>, k);</span><br><span class="line">    <span class="built_in">printf</span>(v);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="crackme2"><a href="#crackme2" class="headerlink" title="crackme2"></a>crackme2</h3><p>IDA打开</p>
<img src="b3446baa/image-20240301181340809.png" class title="image-20240301181340809">

<p>main函数中，先是读入flag，然后使用<code>sub_14000105C</code>函数进行加密和验证</p>
<p>先看<code>sub_14000105C</code>函数</p>
<img src="b3446baa/image-20240301181547044.png" class title="image-20240301181547044">

<p>一个base64换表，解出来后是一个假的flag</p>
<p>回到main函数，看中间这个爆红，tab跳转直接看汇编</p>
<img src="b3446baa/image-20240301181716921.png" class title="image-20240301181716921">

<p>可以发现在这段代码的下面还有一段代码，但是无法被反汇编</p>
<img src="b3446baa/image-20240301181750892.png" class title="image-20240301181750892">

<p>虽然无法反汇编看，但是直接看也可以看出是对<code>sub_14000105C</code>函数的异或，也就是刚刚出假flag的函数</p>
<p>那么可以猜测是SMC，这里异或后呈现的是base64，而异或前才是真正的加密函数</p>
<p>那么我们可以使用ida脚本来把这个函数异或回去，其中进行异或的另一堆数据就是上面的<code>unk_140006000</code></p>
<p>先把<code>sub_14000105C</code>函数undefine</p>
<img src="b3446baa/image-20240301182129960.png" class title="image-20240301182129960">

<p>然后执行如下idapython脚本</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">import idc</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in <span class="title function_">range</span><span class="params">(<span class="number">0x246A</span>)</span>:</span><br><span class="line">    idc.<span class="title function_">patch_byte</span><span class="params">(<span class="number">0x14000105C</span> + i, idc.get_db_byte(<span class="number">0x14000105C</span> + i) ^ idc.get_db_byte(<span class="number">0x140006000</span> + i))</span></span><br></pre></td></tr></table></figure>

<p>执行脚本后，对<code>unk_14000105C</code>重新创建函数，之后f5查看伪代码</p>
<p>此时就可以看到真正的加密函数了</p>
<img src="b3446baa/image-20240301182757286.png" class title="image-20240301182757286">

<p>一堆约束方程，使用z3规划求解</p>
<p>这里在比赛时因为我创建变量使用的是BitVec，跑的非常慢，挂了一个下午都没出结果</p>
<p>赛后看了官方wp才知道BitVec跑高维方程巨慢，使用Int一下子就可以出来了</p>
<p>下面脚本是赛后改用Int创建变量写的， 一下子就出结果了</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">b = [b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31] = Ints(<span class="string">&#x27;b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 b10 b11 b12 b13 b14 b15 b16 b17 b18 b19 b20 b21 b22 b23 b24 b25 b26 b27 b28 b29 b30 b31&#x27;</span>)</span><br><span class="line">s.add(b9+ <span class="number">201</span> * b4+ <span class="number">194</span> * b3+ <span class="number">142</span> * b15+ <span class="number">114</span> * b17+ <span class="number">103</span> * b2+ <span class="number">52</span> * (b26 + b13)+ ((b12 + b16) *<span class="number">64</span>)+ <span class="number">14</span> * (b19 + <span class="number">4</span> * b27 + b27)+ <span class="number">9</span> * (b7 + <span class="number">23</span> * b11 + b21 + <span class="number">3</span> * b25 + <span class="number">4</span> * b21 + <span class="number">4</span> * b23)+ <span class="number">5</span> * (b24 + <span class="number">23</span> * b14 + <span class="number">2</span> * (b31 + <span class="number">2</span> * b30) + <span class="number">5</span> * b0 + <span class="number">39</span> * b18 + <span class="number">51</span> * b29)+ <span class="number">24</span> * (b28 + <span class="number">10</span> * b1 + <span class="number">4</span> * (b22 + b8 + <span class="number">2</span> * b20))+ <span class="number">62</span> * b6+ <span class="number">211</span> * b5+ <span class="number">212</span> * b10 == <span class="number">296473</span>)</span><br><span class="line">s.add(<span class="number">207</span> * b5+ <span class="number">195</span> * b6+ <span class="number">151</span> * b7+ <span class="number">57</span> * b0+ <span class="number">118</span> * b23+ <span class="number">222</span> * b22+ <span class="number">103</span> * b8+ <span class="number">181</span> * b28+ <span class="number">229</span> * b12+ <span class="number">142</span> * b13+ <span class="number">51</span> * b10+ <span class="number">122</span> * (b20 + b15)+ <span class="number">91</span> * (b21 + <span class="number">2</span> * b24)+ <span class="number">107</span> * (b11 + b27)+ <span class="number">81</span> * (b26 + <span class="number">2</span> * b9 + b9)+ <span class="number">45</span> * (b30 + <span class="number">2</span> * (b2 + b4) + b2 + b4)+ <span class="number">4</span> * (<span class="number">3</span> * (b16 + b19 + <span class="number">2</span> * b16 + <span class="number">5</span> * b29) + b17 + <span class="number">29</span> * (b3 + b25) + <span class="number">25</span> * b18)+ <span class="number">26</span> * b1+ <span class="number">101</span> * b14+ <span class="number">154</span> * b31 == <span class="number">354358</span>)</span><br><span class="line">s.add(<span class="number">177</span> * b7+ <span class="number">129</span> * b20+ <span class="number">117</span> * b22+ <span class="number">143</span> * b1+ <span class="number">65</span> * b28+ <span class="number">137</span> * b27+ <span class="number">215</span> * b19+ <span class="number">93</span> * b13+ <span class="number">235</span> * b17+ <span class="number">203</span> * b2+ <span class="number">15</span> * (b8 + <span class="number">17</span> * b14)+ <span class="number">2</span>* (b4+ <span class="number">91</span> * b12+ <span class="number">95</span> * b10+ <span class="number">51</span> * b5+ <span class="number">81</span> * b15+ <span class="number">92</span> * b9+ <span class="number">112</span> * (b3 + b23)+ <span class="number">32</span> * (b6 + <span class="number">2</span> * (b25 + b16))+ <span class="number">6</span> * (b21 + <span class="number">14</span> * b24 + <span class="number">19</span> * b18)+ <span class="number">83</span> * b0+ <span class="number">53</span> * b29+ <span class="number">123</span> * b30)+ b26+ <span class="number">175</span> * b11+ <span class="number">183</span> * b31 == <span class="number">448573</span>)</span><br><span class="line">s.add(<span class="number">113</span> * b30+ <span class="number">74</span> * b31+ <span class="number">238</span> * b23+ <span class="number">140</span> * b21+ <span class="number">214</span> * b20+ <span class="number">242</span> * b28+ <span class="number">160</span> * b19+ <span class="number">136</span> * b16+ <span class="number">209</span> * b12+ <span class="number">220</span> * b13+ <span class="number">50</span> * b4+ <span class="number">125</span> * b3+ <span class="number">175</span> * b15+ <span class="number">23</span> * b17+ <span class="number">137</span> * b6+ <span class="number">149</span> * b9+ <span class="number">83</span> * (b29 + <span class="number">2</span> * b14)+ <span class="number">21</span> * (<span class="number">9</span> * b10 + b24)+ <span class="number">59</span> * (<span class="number">4</span> * b11 + b26)+ <span class="number">41</span> * (b25 + b5)+ <span class="number">13</span> * (b8 + <span class="number">11</span> * (b7 + b18) + <span class="number">6</span> * b22 + <span class="number">4</span> * (b1 + <span class="number">2</span> * b2) + b1 + <span class="number">2</span> * b2 + <span class="number">17</span> * b0)+ <span class="number">36</span> * b27 == <span class="number">384306</span>)</span><br><span class="line">s.add(<span class="number">229</span> * b19+ <span class="number">78</span> * b25+ b21+ b12+ <span class="number">133</span> * b11+ <span class="number">74</span> * b23+ <span class="number">69</span> * b20+ <span class="number">243</span> * b8+ <span class="number">98</span> * b1+ <span class="number">253</span> * b28+ <span class="number">142</span> * b27+ <span class="number">175</span> * b13+ <span class="number">105</span> * b5+ <span class="number">221</span> * b3+ <span class="number">121</span> * b17+ <span class="number">218</span> * (b30 + b10)+ <span class="number">199</span> * (b4 + b14)+ <span class="number">33</span> * (b7 + <span class="number">7</span> * b26)+ <span class="number">4</span> * (<span class="number">27</span> * b15 + <span class="number">50</span> * b2 + <span class="number">45</span> * b9 + <span class="number">19</span> * (b31 + b22) + b24 + <span class="number">16</span> * b16 + <span class="number">52</span> * b29)+ <span class="number">195</span> * b6+ <span class="number">211</span> * b0+ <span class="number">153</span> * b18 == <span class="number">424240</span>)</span><br><span class="line">s.add(<span class="number">181</span> * b27+ <span class="number">61</span> * b21+ <span class="number">65</span> * b19+ <span class="number">58</span> * b13+ <span class="number">170</span> * b10+ <span class="number">143</span> * b4+ <span class="number">185</span> * b3+ <span class="number">86</span> * b2+ <span class="number">97</span> * b6+ <span class="number">235</span> * (b16 + b11)+ <span class="number">3</span>* (<span class="number">53</span> * b5+ <span class="number">74</span> * (b28 + b31)+ <span class="number">13</span> * (b22 + <span class="number">6</span> * b12)+ <span class="number">11</span> * (b17 + <span class="number">7</span> * b15)+ <span class="number">15</span> * (b9 + <span class="number">4</span> * b26)+ b8+ <span class="number">35</span> * b25+ <span class="number">29</span> * b18)+ <span class="number">4</span> * (<span class="number">57</span> * b23 + <span class="number">18</span> * (b0 + (<span class="number">2</span> * b20)) + b1 + <span class="number">17</span> * b24 + <span class="number">55</span> * b14)+ <span class="number">151</span> * b7+ <span class="number">230</span> * b29+ <span class="number">197</span> * b30 == <span class="number">421974</span>)</span><br><span class="line">s.add(<span class="number">209</span> * b19+ <span class="number">249</span> * b14+ <span class="number">195</span> * b21+ <span class="number">219</span> * b27+ <span class="number">201</span> * b17+ <span class="number">85</span> * b9+ <span class="number">213</span> * (b26 + b13)+ <span class="number">119</span> * (b2 + <span class="number">2</span> * b5)+ <span class="number">29</span> * (<span class="number">8</span> * b4 + b7 + <span class="number">4</span> * b11 + b11)+ <span class="number">2</span>* (b28+ <span class="number">55</span> * (<span class="number">2</span> * b10 + b30)+ <span class="number">3</span> * (b3 + <span class="number">39</span> * b12 + <span class="number">2</span> * (b23 + <span class="number">20</span> * b15) + <span class="number">35</span> * b8)+ <span class="number">4</span> * (b0 + <span class="number">31</span> * b22 + <span class="number">28</span> * b31)+ <span class="number">26</span> * b1+ <span class="number">46</span> * ((<span class="number">2</span> * b20) + b24)+ <span class="number">98</span> * b25)+ <span class="number">53</span> * b16+ <span class="number">171</span> * b18+ <span class="number">123</span> * b29 == <span class="number">442074</span>)</span><br><span class="line">s.add(<span class="number">162</span> * b30+ <span class="number">74</span> * b0+ <span class="number">28</span> * b11+ <span class="number">243</span> * b22+ <span class="number">123</span> * b1+ <span class="number">73</span> * b28+ <span class="number">166</span> * b16+ <span class="number">94</span> * b4+ <span class="number">113</span> * b2+ <span class="number">193</span> * b6+ <span class="number">122</span> * (b23 + <span class="number">2</span> * b8)+ <span class="number">211</span> * (b3 + b27)+ <span class="number">21</span> * (b26 + <span class="number">7</span> * b5)+ <span class="number">11</span> * (b29 + <span class="number">23</span> * (b24 + b17) + <span class="number">2</span> * (b7 + <span class="number">5</span> * b14 + <span class="number">2</span> * (<span class="number">2</span> * b9 + b10) + <span class="number">2</span> * b9 + b10))+ <span class="number">5</span> * (<span class="number">46</span> * b12 + <span class="number">26</span> * b15 + <span class="number">4</span> * (b13 + <span class="number">2</span> * b19) + b18 + <span class="number">27</span> * b21 + <span class="number">10</span> * b25)+ <span class="number">36</span> * (b31 + <span class="number">5</span> * b20) == <span class="number">376007</span>)</span><br><span class="line">s.add(<span class="number">63</span> * b30+ <span class="number">143</span> * b0+ <span class="number">250</span> * b23+ <span class="number">136</span> * b21+ <span class="number">214</span> * b7+ <span class="number">62</span> * b20+ <span class="number">221</span> * b22+ <span class="number">226</span> * b8+ <span class="number">171</span> * b1+ <span class="number">178</span> * b28+ <span class="number">244</span> * b16+ (b12 *<span class="number">128</span>)+ <span class="number">150</span> * b13+ <span class="number">109</span> * b10+ <span class="number">70</span> * b5+ <span class="number">127</span> * b15+ <span class="number">204</span> * b17+ <span class="number">121</span> * b6+ <span class="number">173</span> * b9+ <span class="number">69</span> * (b27 + b14 + b11)+ <span class="number">74</span> * (b24 + <span class="number">2</span> * b18 + b18)+ <span class="number">22</span> * (<span class="number">7</span> * b4 + b26 + <span class="number">10</span> * b2)+ <span class="number">40</span> * (b25 + <span class="number">4</span> * b19 + b19)+ <span class="number">81</span> * b3+ <span class="number">94</span> * b29+ <span class="number">84</span> * b31 == <span class="number">411252</span>)</span><br><span class="line">s.add(<span class="number">229</span> * b18+ <span class="number">121</span> * b29+ <span class="number">28</span> * b14+ <span class="number">206</span> * b24+ <span class="number">145</span> * b11+ <span class="number">41</span> * b25+ <span class="number">247</span> * b23+ <span class="number">118</span> * b20+ <span class="number">241</span> * b1+ <span class="number">79</span> * b28+ <span class="number">102</span> * b27+ <span class="number">124</span> * b16+ <span class="number">65</span> * b12+ <span class="number">68</span> * b13+ <span class="number">239</span> * b26+ <span class="number">148</span> * b4+ <span class="number">245</span> * b17+ <span class="number">115</span> * b2+ <span class="number">163</span> * b6+ <span class="number">137</span> * b9+ <span class="number">53</span> * (b0 + <span class="number">2</span> * b10)+ <span class="number">126</span> * (b7 + <span class="number">2</span> * b3)+ <span class="number">38</span> * (b8 + b19 + <span class="number">4</span> * b8 + <span class="number">6</span> * b5)+ <span class="number">12</span> * (b21 + <span class="number">16</span> * b22)+ <span class="number">109</span> * b15+ <span class="number">232</span> * b31+ <span class="number">47</span> * b30 == <span class="number">435012</span>)</span><br><span class="line">s.add(<span class="number">209</span> * b19+ <span class="number">233</span> * b7+ <span class="number">93</span> * b25+ <span class="number">241</span> * b21+ <span class="number">137</span> * b28+ <span class="number">249</span> * b26+ <span class="number">188</span> * b10+ <span class="number">86</span> * b4+ <span class="number">246</span> * b3+ <span class="number">149</span> * b15+ <span class="number">99</span> * b2+ <span class="number">37</span> * b6+ <span class="number">219</span> * b9+ <span class="number">17</span> * (b23 + <span class="number">10</span> * b27)+ <span class="number">49</span> * (b0 + <span class="number">3</span> * b31 + <span class="number">4</span> * b1 + b1)+ <span class="number">5</span> * (<span class="number">16</span> * b17 + <span class="number">11</span> * (b5 + <span class="number">2</span> * b11 + b11) + <span class="number">12</span> * b8 + b13 + <span class="number">30</span> * b24 + <span class="number">27</span> * b30)+ <span class="number">18</span> * (b16 + <span class="number">2</span> * (b29 + b20 + <span class="number">2</span> * b29) + b29 + b20 + <span class="number">2</span> * b29)+ <span class="number">24</span> * b12+ <span class="number">109</span> * b22+ <span class="number">183</span> * b14+ <span class="number">154</span> * b18 == <span class="number">392484</span>)</span><br><span class="line">s.add(<span class="number">155</span> * b18+ <span class="number">247</span> * b7+ <span class="number">157</span> * b1+ <span class="number">119</span> * b16+ <span class="number">161</span> * b26+ <span class="number">133</span> * b15+ <span class="number">85</span> * b6+ <span class="number">229</span> * (b8 + b4)+ <span class="number">123</span> * (<span class="number">2</span> * b13 + b22)+ <span class="number">21</span> * (b5 + <span class="number">12</span> * b14)+ <span class="number">55</span> * (b12 + b0 + b9 + <span class="number">2</span> * b0)+ <span class="number">15</span> * (b31 + <span class="number">16</span> * b3 + <span class="number">9</span> * b19)+ <span class="number">2</span>* (b21+ <span class="number">115</span> * b10+ <span class="number">111</span> * b24+ <span class="number">26</span> * b23+ <span class="number">88</span> * b28+ <span class="number">73</span> * b17+ <span class="number">71</span> * b2+ <span class="number">28</span> * (b20 + <span class="number">2</span> * (b27 + <span class="number">2</span> * b25))+ <span class="number">51</span> * b11+ <span class="number">99</span> * b29+ <span class="number">125</span> * b30) == <span class="number">437910</span>)</span><br><span class="line">s.add(<span class="number">220</span> * b31+ <span class="number">200</span> * b29+ <span class="number">139</span> * b18+ <span class="number">33</span> * b0+ <span class="number">212</span> * b14+ <span class="number">191</span> * b24+ <span class="number">30</span> * b11+ <span class="number">233</span> * b25+ <span class="number">246</span> * b23+ <span class="number">89</span> * b21+ <span class="number">252</span> * b7+ <span class="number">223</span> * b22+ <span class="number">19</span> * b27+ <span class="number">141</span> * b19+ <span class="number">163</span> * b12+ <span class="number">185</span> * b26+ <span class="number">136</span> * b13+ <span class="number">46</span> * b4+ <span class="number">109</span> * b3+ <span class="number">217</span> * b17+ <span class="number">75</span> * b6+ <span class="number">157</span> * b9+ <span class="number">125</span> * (b2 + b30)+ <span class="number">104</span> * ((<span class="number">2</span> * b5) + b15)+ <span class="number">43</span> * (b1 + <span class="number">2</span> * b10 + b10)+ <span class="number">32</span> * (b28 + b8 + <span class="number">2</span> * b28 + <span class="number">2</span> * (b16 + b20)) == <span class="number">421905</span>)</span><br><span class="line">s.add(<span class="number">211</span> * b4+ <span class="number">63</span> * b18+ <span class="number">176</span> * b0+ <span class="number">169</span> * b24+ <span class="number">129</span> * b11+ <span class="number">146</span> * b7+ <span class="number">111</span> * b20+ <span class="number">68</span> * b22+ <span class="number">39</span> * b27+ <span class="number">188</span> * b16+ <span class="number">130</span> * b12+ (b13 *<span class="number">64</span>)+ <span class="number">91</span> * b5+ <span class="number">208</span> * b15+ <span class="number">145</span> * b17+ <span class="number">247</span> * b9+ <span class="number">93</span> * (b6 + b26)+ <span class="number">71</span> * (b23 + <span class="number">2</span> * b2)+ <span class="number">103</span> * (b28 + <span class="number">2</span> * b14)+ <span class="number">6</span> * (b19 + <span class="number">10</span> * b1 + <span class="number">28</span> * b8 + <span class="number">9</span> * b10 + <span class="number">19</span> * b21 + <span class="number">24</span> * b25 + <span class="number">22</span> * b31)+ <span class="number">81</span> * b3+ <span class="number">70</span> * b29+ <span class="number">23</span> * b30 == <span class="number">356282</span>)</span><br><span class="line">s.add(<span class="number">94</span> * b22+ <span class="number">101</span> * b21+ <span class="number">152</span> * b7+ <span class="number">200</span> * b8+ <span class="number">226</span> * b28+ <span class="number">211</span> * b16+ <span class="number">121</span> * b4+ <span class="number">74</span> * b2+ <span class="number">166</span> * b9+ ((b23 + <span class="number">3</span> * b1) *<span class="number">64</span>)+ <span class="number">41</span> * (<span class="number">4</span> * b12 + b19)+ <span class="number">23</span> * (b17 + <span class="number">11</span> * b5)+ <span class="number">7</span> * (b15 + <span class="number">10</span> * b27 + <span class="number">2</span> * (b3 + <span class="number">2</span> * (b13 + <span class="number">4</span> * (b10 + b26)) + b13 + <span class="number">4</span> * (b10 + b26)) + (b3 + <span class="number">2</span> * (b13 + <span class="number">4</span> * (b10 + b26)) + b13 + <span class="number">4</span> * (b10 + b26)))+ <span class="number">3</span> * (<span class="number">78</span> * b14 + <span class="number">81</span> * b24 + <span class="number">55</span> * b11 + <span class="number">73</span> * b25 + <span class="number">4</span> * b20 + b18 + <span class="number">85</span> * b31 + <span class="number">65</span> * b30)+ <span class="number">62</span> * b6+ <span class="number">88</span> * b0+ <span class="number">110</span> * b29 == <span class="number">423091</span>)</span><br><span class="line">s.add(<span class="number">133</span> * b6+ <span class="number">175</span> * b18+ <span class="number">181</span> * b14+ <span class="number">199</span> * b24+ <span class="number">123</span> * b11+ <span class="number">242</span> * b25+ <span class="number">75</span> * b23+ <span class="number">69</span> * b21+ <span class="number">153</span> * b7+ <span class="number">33</span> * b20+ <span class="number">100</span> * b22+ <span class="number">229</span> * b8+ <span class="number">177</span> * b28+ <span class="number">134</span> * b13+ <span class="number">179</span> * b10+ <span class="number">129</span> * b5+ <span class="number">14</span> * b3+ <span class="number">247</span> * b4+ <span class="number">228</span> * b15+ <span class="number">92</span> * b2+ <span class="number">86</span> * (b12 + (<span class="number">2</span> * b9))+ <span class="number">94</span> * (b16 + b19)+ <span class="number">37</span> * (b26 + <span class="number">4</span> * b31)+ <span class="number">79</span> * (b27 + <span class="number">2</span> * b1)+ <span class="number">72</span> * b0+ <span class="number">93</span> * b17+ <span class="number">152</span> * b29+ <span class="number">214</span> * b30 == <span class="number">391869</span>)</span><br><span class="line">s.add(<span class="number">211</span> * b4+ <span class="number">213</span> * b9+ <span class="number">197</span> * b7+ <span class="number">159</span> * b27+ <span class="number">117</span> * b19+ <span class="number">119</span> * b12+ <span class="number">98</span> * b26+ <span class="number">218</span> * b5+ <span class="number">106</span> * b17+ <span class="number">69</span> * b2+ <span class="number">43</span> * (b21 + b10 + <span class="number">2</span> * b21)+ <span class="number">116</span> * (b29 + b3 + (<span class="number">2</span> * b20))+ <span class="number">5</span> * (b22 + <span class="number">9</span> * b16 + <span class="number">35</span> * b15 + <span class="number">37</span> * b13)+ <span class="number">11</span> * (b24 + <span class="number">13</span> * b11 + <span class="number">5</span> * b0 + <span class="number">8</span> * b14)+ <span class="number">6</span> * (<span class="number">29</span> * b1 + <span class="number">25</span> * b28 + <span class="number">38</span> * b6 + b18 + <span class="number">13</span> * b25 + <span class="number">10</span> * b31)+ <span class="number">136</span> * b8+ <span class="number">142</span> * b23+ <span class="number">141</span> * b30 == <span class="number">376566</span>)</span><br><span class="line">s.add(<span class="number">173</span> * b31+ <span class="number">109</span> * b18+ <span class="number">61</span> * b14+ <span class="number">187</span> * b25+ <span class="number">79</span> * b23+ <span class="number">53</span> * b7+ <span class="number">184</span> * b19+ <span class="number">43</span> * b16+ <span class="number">41</span> * b12+ <span class="number">166</span> * b13+ <span class="number">193</span> * b5+ <span class="number">58</span> * b4+ <span class="number">146</span> * b3+ (b15 *<span class="number">64</span>)+ <span class="number">89</span> * b17+ <span class="number">121</span> * b2+ <span class="number">5</span> * (b26 + <span class="number">23</span> * b28)+ <span class="number">7</span> * (<span class="number">29</span> * b9 + b10 + <span class="number">4</span> * b8)+ <span class="number">13</span> * (<span class="number">3</span> * b22 + b24 + <span class="number">7</span> * b20 + <span class="number">13</span> * b21)+ <span class="number">3</span> * (b29 + <span class="number">83</span> * b0 + <span class="number">51</span> * b11 + <span class="number">33</span> * b6 + <span class="number">8</span> * (b30 + <span class="number">4</span> * b1) + <span class="number">18</span> * b27) == <span class="number">300934</span>)</span><br><span class="line">s.add(<span class="number">78</span> * b25+ <span class="number">131</span> * b0+ <span class="number">185</span> * b24+ <span class="number">250</span> * b7+ <span class="number">90</span> * b20+ <span class="number">129</span> * b22+ <span class="number">255</span> * b1+ <span class="number">206</span> * b28+ <span class="number">239</span> * b27+ <span class="number">150</span> * b3+ <span class="number">253</span> * b17+ <span class="number">104</span> * b6+ <span class="number">58</span> * (b21 + <span class="number">2</span> * b8)+ <span class="number">96</span> * (b18 + b13)+ <span class="number">117</span> * (b12 + <span class="number">2</span> * b29)+ <span class="number">27</span> * (b26 + <span class="number">8</span> * b9 + b9)+ <span class="number">19</span> * (b16 + <span class="number">3</span> * b19 + <span class="number">4</span> * b10 + b10)+ <span class="number">7</span> * (<span class="number">22</span> * b5 + <span class="number">3</span> * (b2 + <span class="number">11</span> * b4) + b31 + <span class="number">29</span> * b23 + <span class="number">14</span> * b11)+ <span class="number">109</span> * b15+ <span class="number">102</span> * b14+ <span class="number">100</span> * b30 == <span class="number">401351</span>)</span><br><span class="line">s.add(<span class="number">233</span> * b30+ <span class="number">71</span> * b0+ <span class="number">209</span> * b11+ <span class="number">82</span> * b23+ <span class="number">58</span> * b20+ <span class="number">53</span> * b27+ <span class="number">113</span> * b16+ <span class="number">206</span> * b13+ <span class="number">39</span> * b5+ <span class="number">163</span> * b15+ <span class="number">222</span> * b2+ <span class="number">191</span> * b9+ <span class="number">123</span> * (b8 + b7)+ <span class="number">69</span> * (b12 + <span class="number">2</span> * b6 + b6)+ <span class="number">9</span> * (b31 + <span class="number">8</span> * b4 + <span class="number">7</span> * (<span class="number">3</span> * b25 + b1) + <span class="number">5</span> * b24 + <span class="number">19</span> * b14)+ <span class="number">4</span> * (b18 + <span class="number">26</span> * b26 + <span class="number">61</span> * b10 + <span class="number">43</span> * b22 + <span class="number">49</span> * b21 + <span class="number">32</span> * b29)+ <span class="number">10</span> * (<span class="number">7</span> * (b28 + (<span class="number">3</span> * b19)) + b17 + <span class="number">12</span> * b3) == <span class="number">368427</span>)</span><br><span class="line">s.add(<span class="number">139</span> * b14+ <span class="number">53</span> * b0+ <span class="number">158</span> * b24+ <span class="number">225</span> * b25+ <span class="number">119</span> * b23+ <span class="number">67</span> * b21+ <span class="number">213</span> * b7+ <span class="number">188</span> * b1+ <span class="number">152</span> * b28+ <span class="number">187</span> * b19+ <span class="number">129</span> * b16+ <span class="number">54</span> * b12+ <span class="number">125</span> * b26+ <span class="number">170</span> * b4+ <span class="number">184</span> * b2+ <span class="number">226</span> * b6+ <span class="number">253</span> * b9+ <span class="number">26</span> * (b10 + b5)+ <span class="number">97</span> * (b29 + <span class="number">2</span> * b27)+ <span class="number">39</span> * (<span class="number">5</span> * b20 + b11)+ <span class="number">21</span> * (b17 + <span class="number">8</span> * b22)+ <span class="number">12</span> * (<span class="number">17</span> * b3 + b13 + <span class="number">15</span> * b8 + <span class="number">12</span> * b30)+ <span class="number">165</span> * b15+ <span class="number">88</span> * b18+ <span class="number">157</span> * b31 == <span class="number">403881</span>)</span><br><span class="line">s.add(<span class="number">114</span> * b31+ <span class="number">61</span> * b11+ <span class="number">134</span> * b7+ <span class="number">62</span> * b22+ <span class="number">89</span> * b12+ <span class="number">211</span> * b26+ <span class="number">163</span> * b5+ <span class="number">66</span> * b4+ <span class="number">201</span> * (b8 + b9)+ <span class="number">47</span> * (<span class="number">5</span> * b24 + b6)+ <span class="number">74</span> * (b29 + b13)+ <span class="number">142</span> * (b21 + b1)+ <span class="number">35</span> * (b15 + <span class="number">6</span> * b20)+ <span class="number">39</span> * (b18 + <span class="number">6</span> * b14)+ <span class="number">27</span> * (b27 + <span class="number">9</span> * b16 + <span class="number">8</span> * b23)+ <span class="number">4</span> * (b19 + <span class="number">63</span> * b30 + <span class="number">2</span> * (b25 + <span class="number">12</span> * (b3 + b0) + <span class="number">8</span> * b2 + <span class="number">26</span> * b10))+ <span class="number">10</span> * (b28 + <span class="number">4</span> * b17 + b17) == <span class="number">382979</span>)</span><br><span class="line">s.add(<span class="number">122</span> * b27+ <span class="number">225</span> * b19+ <span class="number">52</span> * b16+ <span class="number">253</span> * b12+ <span class="number">197</span> * b26+ <span class="number">187</span> * b13+ <span class="number">181</span> * b10+ <span class="number">183</span> * b5+ <span class="number">47</span> * b15+ <span class="number">229</span> * b17+ <span class="number">88</span> * b6+ <span class="number">127</span> * (b3 + (<span class="number">2</span> * b9))+ <span class="number">37</span> * (b8 + <span class="number">3</span> * b31)+ ((b2 + <span class="number">2</span> * b14 + b14) *<span class="number">64</span>)+ <span class="number">7</span> * (<span class="number">21</span> * b28 + b11 + <span class="number">18</span> * (b29 + b25 + (<span class="number">2</span> * b24)))+ <span class="number">6</span> * (<span class="number">23</span> * b4 + b20 + <span class="number">17</span> * b21 + <span class="number">39</span> * b23)+ <span class="number">10</span> * (b0 + <span class="number">11</span> * b1 + <span class="number">21</span> * b22)+ <span class="number">149</span> * b30+ <span class="number">165</span> * b7+ <span class="number">121</span> * b18 == <span class="number">435695</span>)</span><br><span class="line">s.add(<span class="number">165</span> * b15+ <span class="number">223</span> * b29+ <span class="number">249</span> * b0+ <span class="number">199</span> * b25+ <span class="number">135</span> * b21+ <span class="number">133</span> * b20+ <span class="number">254</span> * b22+ <span class="number">111</span> * b8+ <span class="number">189</span> * b1+ <span class="number">221</span> * b27+ <span class="number">115</span> * b19+ <span class="number">186</span> * b12+ <span class="number">79</span> * b5+ <span class="number">217</span> * b4+ <span class="number">122</span> * b2+ <span class="number">38</span> * b9+ <span class="number">109</span> * ((<span class="number">2</span> * b13) + b10)+ <span class="number">14</span> * (b28 + <span class="number">17</span> * b7 + <span class="number">8</span> * (b23 + (<span class="number">2</span> * b24)))+ <span class="number">4</span> * (<span class="number">11</span> * (<span class="number">5</span> * b14 + b17) + <span class="number">6</span> * (b3 + <span class="number">2</span> * b6) + b11 + <span class="number">52</span> * b26 + <span class="number">50</span> * b16)+ <span class="number">229</span> * b18+ <span class="number">86</span> * b31+ <span class="number">234</span> * b30 == <span class="number">453748</span>)</span><br><span class="line">s.add(<span class="number">181</span> * b27+ <span class="number">94</span> * b22+ <span class="number">125</span> * b25+ <span class="number">226</span> * b20+ <span class="number">155</span> * b8+ <span class="number">95</span> * b19+ <span class="number">212</span> * b26+ <span class="number">91</span> * b13+ <span class="number">194</span> * b10+ <span class="number">98</span> * b4+ <span class="number">166</span> * b2+ <span class="number">120</span> * b6+ <span class="number">59</span> * b9+ <span class="number">32</span> * (b12 + b28)+ <span class="number">158</span> * (b23 + b0)+ <span class="number">101</span> * (b5 + b30)+ <span class="number">63</span> * (b29 + <span class="number">2</span> * b16)+ <span class="number">67</span> * (b1 + <span class="number">2</span> * b15)+ <span class="number">11</span> * (b17 + <span class="number">10</span> * b24 + <span class="number">11</span> * b3)+ <span class="number">39</span> * (b14 + <span class="number">4</span> * (b21 + b18))+ <span class="number">233</span> * b7+ <span class="number">56</span> * b11+ <span class="number">225</span> * b31 == <span class="number">358321</span>)</span><br><span class="line">s.add(<span class="number">229</span> * b19+ <span class="number">135</span> * b29+ <span class="number">197</span> * b18+ <span class="number">118</span> * b0+ <span class="number">143</span> * b24+ <span class="number">134</span> * b23+ <span class="number">204</span> * b7+ <span class="number">173</span> * b20+ <span class="number">81</span> * b8+ <span class="number">60</span> * b1+ <span class="number">58</span> * b28+ <span class="number">179</span> * b16+ <span class="number">142</span> * b12+ <span class="number">178</span> * b26+ <span class="number">230</span> * b13+ <span class="number">148</span> * b10+ <span class="number">224</span> * b5+ <span class="number">194</span> * b4+ <span class="number">223</span> * b3+ <span class="number">87</span> * b15+ <span class="number">200</span> * b17+ <span class="number">233</span> * b2+ <span class="number">49</span> * b6+ <span class="number">127</span> * (b27 + b14)+ <span class="number">31</span> * (<span class="number">4</span> * b11 + b9)+ <span class="number">42</span> * (b25 + <span class="number">6</span> * b21)+ <span class="number">109</span> * b22+ <span class="number">75</span> * b31+ <span class="number">165</span> * b30 == <span class="number">456073</span>)</span><br><span class="line">s.add(<span class="number">41</span> * b29+ <span class="number">253</span> * b31+ <span class="number">163</span> * b18+ <span class="number">193</span> * b14+ <span class="number">155</span> * b24+ <span class="number">113</span> * b11+ <span class="number">131</span> * b23+ <span class="number">55</span> * b21+ <span class="number">21</span> * b7+ <span class="number">53</span> * b20+ <span class="number">13</span> * b28+ <span class="number">201</span> * b27+ <span class="number">237</span> * b12+ <span class="number">223</span> * b13+ <span class="number">95</span> * b4+ <span class="number">194</span> * b15+ <span class="number">62</span> * b17+ <span class="number">119</span> * b2+ <span class="number">171</span> * b6+ <span class="number">135</span> * b9+ <span class="number">69</span> * (b3 + <span class="number">3</span> * b1)+ <span class="number">211</span> * (b25 + b10)+ <span class="number">4</span> * (<span class="number">43</span> * b8 + b22 + <span class="number">40</span> * b26)+ <span class="number">6</span> * (b0 + <span class="number">33</span> * b5 + <span class="number">20</span> * (<span class="number">2</span> * b30 + b19) + <span class="number">24</span> * b16) == <span class="number">407135</span>)</span><br><span class="line">s.add(<span class="number">111</span> * b30+ <span class="number">190</span> * b31+ <span class="number">149</span> * b29+ <span class="number">173</span> * b1+ <span class="number">118</span> * b16+ <span class="number">146</span> * b10+ <span class="number">179</span> * b3+ <span class="number">51</span> * b15+ <span class="number">49</span> * b17+ <span class="number">61</span> * b2+ <span class="number">125</span> * b6+ <span class="number">162</span> * b9+ <span class="number">214</span> * (b27 + b14)+ <span class="number">14</span> * ((<span class="number">2</span> * b13) + b4)+ <span class="number">178</span> * (b5 + b24)+ <span class="number">11</span> * (<span class="number">4</span> * b12 + b19 + <span class="number">17</span> * b22)+ <span class="number">65</span> * (b20 + b26 + <span class="number">2</span> * b20 + <span class="number">2</span> * b0)+ <span class="number">4</span> * (b8 + <span class="number">38</span> * b18 + <span class="number">4</span> * (b23 + b25 + <span class="number">8</span> * b23 + <span class="number">4</span> * (b28 + <span class="number">2</span> * b11)) + (b23 + b25 + <span class="number">8</span> * b23 + <span class="number">4</span> * (b28 + <span class="number">2</span> * b11)) + <span class="number">8</span> * b7 + <span class="number">43</span> * b21) == <span class="number">369835</span>)</span><br><span class="line">s.add(<span class="number">27</span> * b11+ <span class="number">223</span> * b23+ <span class="number">147</span> * b20+ <span class="number">13</span> * b19+ <span class="number">35</span> * (b26 + <span class="number">7</span> * b29)+ <span class="number">57</span> * (b30 + (<span class="number">2</span> * b9) + <span class="number">3</span> * b2)+ <span class="number">11</span> * (b25 + <span class="number">17</span> * (b12 + b0) + <span class="number">10</span> * b24 + <span class="number">3</span> * b13)+ <span class="number">2</span>* (<span class="number">53</span> * b16+ b27+ <span class="number">38</span> * b18+ <span class="number">43</span> * b22+ <span class="number">115</span> * b10+ <span class="number">61</span> * b6+ <span class="number">111</span> * (b3 + b7)+ <span class="number">14</span> * (b15 + b8 + <span class="number">2</span> * b8 + <span class="number">8</span> * b1)+ <span class="number">109</span> * b21+ <span class="number">100</span> * b5+ <span class="number">63</span> * b28)+ <span class="number">93</span> * b17+ <span class="number">251</span> * b14+ <span class="number">131</span> * b31 == <span class="number">393303</span>)</span><br><span class="line">s.add(<span class="number">116</span> * b12+ <span class="number">152</span> * b10+ <span class="number">235</span> * b15+ <span class="number">202</span> * b9+ <span class="number">85</span> * (b28 + <span class="number">3</span> * b2)+ <span class="number">221</span> * (b24 + b7)+ <span class="number">125</span> * ((<span class="number">2</span> * b5) + b4)+ <span class="number">7</span> * (<span class="number">19</span> * b29 + <span class="number">9</span> * (b3 + <span class="number">2</span> * b27) + b21 + <span class="number">33</span> * b31 + <span class="number">32</span> * b30)+ <span class="number">3</span> * (<span class="number">71</span> * b17 + <span class="number">43</span> * b6 + <span class="number">32</span> * (b26 + b20) + <span class="number">15</span> * (b0 + b23 + <span class="number">2</span> * b16) + b1 + <span class="number">74</span> * b13 + <span class="number">48</span> * b22)+ <span class="number">10</span> * (b19 + <span class="number">11</span> * b14 + <span class="number">16</span> * b18)+ <span class="number">136</span> * b8+ <span class="number">106</span> * b25+ <span class="number">41</span> * b11 == <span class="number">403661</span>)</span><br><span class="line">s.add(<span class="number">127</span> * b29+ <span class="number">106</span> * b18+ <span class="number">182</span> * b14+ <span class="number">142</span> * b0+ <span class="number">159</span> * b24+ <span class="number">17</span> * b25+ <span class="number">211</span> * b23+ <span class="number">134</span> * b21+ <span class="number">199</span> * b8+ <span class="number">103</span> * b1+ <span class="number">247</span> * b16+ <span class="number">122</span> * b12+ <span class="number">95</span> * b5+ <span class="number">62</span> * b3+ <span class="number">203</span> * b17+ <span class="number">16</span> * b2+ <span class="number">41</span> * (<span class="number">6</span> * b22 + b27)+ <span class="number">9</span> * (<span class="number">22</span> * b4 + b15 + <span class="number">27</span> * b13 + <span class="number">28</span> * b7)+ <span class="number">10</span> * (b28 + b6 + (<span class="number">3</span> * b19) + <span class="number">8</span> * b26 + <span class="number">2</span> * (b6 + (<span class="number">3</span> * b19) + <span class="number">8</span> * b26) + <span class="number">13</span> * b10)+ <span class="number">6</span> * (<span class="number">23</span> * b11 + b20)+ <span class="number">213</span> * b9+ <span class="number">179</span> * b31+ <span class="number">43</span> * b30 == <span class="number">418596</span>)</span><br><span class="line">s.add(<span class="number">149</span> * b30+ b25+ <span class="number">133</span> * b6+ <span class="number">207</span> * b5+ <span class="number">182</span> * b20+ <span class="number">234</span> * b8+ <span class="number">199</span> * b28+ <span class="number">168</span> * b19+ <span class="number">58</span> * b3+ <span class="number">108</span> * b15+ <span class="number">142</span> * b9+ <span class="number">156</span> * (b12 + b27)+ <span class="number">16</span> * (b10 + <span class="number">6</span> * b13)+ <span class="number">126</span> * (b26 + <span class="number">2</span> * b17)+ <span class="number">127</span> * (b29 + <span class="number">2</span> * b11 + b7)+ <span class="number">49</span> * (b14 + <span class="number">4</span> * b24)+ <span class="number">11</span> * (b0 + <span class="number">22</span> * b2)+ <span class="number">5</span> * (b18 + b22 + <span class="number">45</span> * b4 + <span class="number">50</span> * b1)+ <span class="number">109</span> * b21+ <span class="number">124</span> * b23+ <span class="number">123</span> * b31 == <span class="number">418697</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.check())</span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    ans = s.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (ans[b[i]])))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WP</category>
      </categories>
      <tags>
        <tag>WP</tag>
      </tags>
  </entry>
</search>
